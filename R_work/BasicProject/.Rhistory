#꽃잎 그래프
x <- c(1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 6, 6, 6)
y <- c(2, 1, 4, 2, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1)
#꽃잎 그래프
x <- c(1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 6, 6, 6)
y <- c(2, 1, 4, 2, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1)
plot(x,y)
#위와 같은 그래프를 볼 때 중첩된것의 비율을 알기 힘들어서 꽃잎 그래프를 쓴다.
z <- data.frame(x,y)
sunflowerplot(z)
stars(mtcars[1:4], flip.labels=F, key.loc=c(13, 1.5))
stars(mtcars[1:4], flip.labels=F, key.loc=c(13, 1.5), draw.segments=T)
source('C:/academy/hs/Rwork/BasicProject/5_Graph.R', encoding = 'UTF-8', echo=TRUE)
x <- c(1,2,3,4,5)
y <- c(2,3,4,5,6)
z <- c(10, 5, 100, 20, 10)
symbols(x, y, z)
install.packages("plotly")
library(plotly)
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(p)
p <- ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(p)
ggploty(p)
ggplotly(p)
#diamonds 샘플데이터
p <- ggplot(diamonds, aes(x=cut, fill=clarity)) + geom_bar()
p
#diamonds 샘플데이터
p <- ggplot(diamonds, aes(x=cut, fill=clarity)) + geom_bar(position="dodge")
#position을 주면 막대그래프를 따로 볼수있음
p
ggplotly(p)
# dygraphs 패키지를 이용한 인터렉티브 시계열 그래프 그리기
install.packages("dygraphs")
library(dygraphs)
library(xts)
head(economics)
eco <- xts(economics$unemploy, order.by = economics$date)
eco
dygraph(eco)
dygraph(eco) %>% dyRangeSelector()
eco_a <- xts(economics$psavert, order.by=economics$date)
# 여러값을 동시에 표현
eco_a <- xts(economics$psavert, order.by=economics$date)
eco_a <- xts(economics$unemploy/1000, order.by=economics$date) #1000으로 나눈건 단위 맞추려고
# 여러값을 동시에 표현
eco_a <- xts(economics$psavert, order.by=economics$date)
eco_b <- xts(economics$unemploy/1000, order.by=economics$date) #1000으로 나눈건 단위 맞추려고
eco2 <- cbind(eco_a, eco_b)
head(eco2)
colnames(eco2) <- c("psavert", "unemploy")
head(eco2)
dygraph(eco2)
install.packages("ggiraphExtra")
library(ggiraphExtra)
head(USArrests)  #체포율 범죄율을 나타내는 샘플데이터
str(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var="state")
head(crime)
crime$state <- tolower(crime$state)
head(crime)
#map_data함수  (지도, 지역)
states_map <- map_data("state")
states_map
install.packages("maps")
#map_data함수  (지도, 지역)
states_map <- map_data("state")
states_map
ggChoropleth(data=crime, aes(fill=Murder, map_id=state))  #fill 어떤 데이터를 색으로 채울것인가.
ggChoropleth(data=crime, aes(fill=Murder, map_id=state), map=states_map)  #fill 어떤 데이터를 색으로 채울것인가.
install.packages("mapproj")
ggChoropleth(data=crime, aes(fill=Murder, map_id=state), map=states_map)  #fill 어떤 데이터를 색으로 채울것인가.
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
korpop1 <- changeCode(korpop1)
install.packages("ggiraphExtra")
install.packages("maps")
install.packages("mapproj")
library(ggiraphExtra)
head(USArrests)
str(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var="state") #지역명을 인덱스로
head(crime)
crime$state <- tolower(crime$state) # 소문자로
head(crime)
states_map <- map_data("state")
library(plotly)
#------------------------
#[막대그래프]
# 구동방식별로 고속도로 평균 연비 확인
library(dplyr)
library(ggplot2)
states_map <- map_data("state")
states_map
ggChoropleth(data=dorpop1, aes(fill=pop, map_id=code, tooltip=name), map=kormap, interactive = T)
korpop1 <- rename(korpop1, pop="총인구_명", name="행정구역별_읍면동")
#[워드클라우드]
install.packages("rJava")
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
install.packages("KoNLP") #한글 처리
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
str(kormap1)
str(korpop1)
str(changeCode(kormap1)) # 한글 안깨지도록
str(changeCode(korpop1)) # 한글 안깨지도록
str(changeCode(korpop2)) # 한글 안깨지도록
str(changeCode(korpop3)) # 한글 안깨지도록
korpop11 <- changeCode(korpop1) # korpop1 을 korpop11 변수명으로 지정
str(korpop11) # korpop11 보기
library(ggiraphExtra)
head(USArrests)
str(USArrests)
korpop1 <- rename(korpop1, pop="총인구_명", name="행정구역별_읍면동")
str(korpop1)
ggChoropleth(data=dorpop1, aes(fill=pop, map_id=code, tooltip=name), map=kormap1, interactive = T)
str(chageCode(tbc))
tbc <- changeCode(tbc)
ggChoropleth(data=tbc, aes(fill=NewPts, map_id=code, tooltip=name), map=kormap1, interactive = T)
library(KoNLP)
install.packages("KoNLP") #한글 처리
install.packages("KoNLP") #한글 처리
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
library(KoNLP)
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_231')
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
Sys.setenv(JAVA_HOME='C://Program Files/Java/jdk1.8.0_231')
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
#[워드클라우드]
install.packages("rJava")
install.packages("rJava")
Sys.setenv(JAVA_HOME='C://Program Files/Java/jdk1.8.0_231')
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
#[워드클라우드]
install.packages("rJava")
install.packages("rJava")
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
remove.packages("rJava")
remove.packages("rJava")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
install.packages("rJava")
install.packages("rJava")
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
#[워드클라우드]
remove.packages("rJava")
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
library(rJava)
install.packages("KoNLP") #한글 처리
#code 작성   R사용방법
'''{r setup, include=FALSE}
knirt::opts_chnk$set(echo=TRUE)
'''
###1-1. 라이브러리 준비
'''{r}
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("readxl")
;
q
'''
install.packages("foreign")
install.packages("dplyr")
install.packages("dplyr")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
install.packages("rJava")
install.packages("rJava")
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
#install.packages("foreign")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("readxl")
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
#install.packages("foreign")
install.packages("dplyr")
install.packages("dplyr")
raw_welfare <- read.spss(file="data/Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
head(raw_welfare)
#[워드클라우드]
remove.packages("rJava")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
install.packages("rJava")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
#[워드클라우드]
remove.packages("rJava")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
install.packages("rJava", INSTALL_opts="--no-multiarch")
install.packages("rJava", INSTALL_opts = "--no-multiarch")
library(rJava)
install.packages("rJava", INSTALL_opts="--no-multiarch")
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
welfare <- rename(welfare, sex=h10_g3, birth=h10_g4, marriage=h10_g10,
religion=h10_g11, income=p1002_8aq1, code_job=h10_eco9,
code_region=h10_reg7)
welfare <- welfare[, c("sex", "birth", "marriage", "religion", "income", "code_jog", "code_region")]
welfare <- welfare[, c("sex", "birth", "marriage", "religion", "income", "code_jog", "code_region")]
raw_welfare <- read.spss(file="data/Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
#install.packages("foreign")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("readxl")
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
raw_welfare <- read.spss(file="data/Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
#복사본
welfare <- raw_welfare
welfare <- rename(welfare, sex=h10_g3, birth=h10_g4, marriage=h10_g10,
religion=h10_g11, income=p1002_8aq1, code_job=h10_eco9,
code_region=h10_reg7)
welfare <- welfare[, c("sex", "birth", "marriage", "religion", "income", "code_jog", "code_region")]
str(welfare)
Sys.getenv('JAVA')
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231')
Sys.getenv('JAVA')
Sys.getenv('JAVA')
Sys.getenv('JAVA_HOME')
install.packages("KoNLP",INSTALL_opts="--no-multiarch") #한글 처리
#[워드클라우드]
remove.packages("rJava")
install.packages('rJava', repos='http://cran.us.r-project.org', INSTALL_opts='--no-multiarch')
install.packages("rJava", repos = "http://cran.us.r-project.org", INSTALL_opts = "--no-multiarch")
Sys.getenv('JAVA_HOME')
library(rJava)
install.packages("KoNLP",INSTALL_opts="--no-multiarch") #한글 처리
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_231/bin/server')
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231/bin/server')
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_231/jre/bin/server')
library(rJava)
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
devtools::install_local(path="C:/Users/user/Downloads/KoNLP_0.0-8.0.tar.gz")
library(KoNLP)
library(rJava)
install.packages("Sejong")
library(KoNLP)
install.packages("hash")
library(KoNLP)
install.packages("tau")
library(KoNLP)
#사전 설정
uneNIADic()
#데이터 준비
txt <- readLines("data/hiphop.txt")  #lines는 하나의 문자열로 가져옴
head(txt)
#특수문자 제거
library(stringr)
str_replace_all(txt, "")
str_replace_all(txt, "\\W", " ")
head(txt)
#명사 추출
nouns <- extractNoun(txt)
nouns[1:10]
wordcount[1:10]
wordcount <- table(unlist(nouns))  #list를 해제해야 하나의 뭐가된다고??..
wordcount[1:10]
wordcount[50:60]
tail(df_word)
df_word <- as.data.frame(wordcount, stringsAsFactors = F) #조건 왜 쓴거지
tail(df_word)
#컬럼명 수정
df_word <- rename(df_word, word=Var1, freq=Freq)
#컬럼명 수정
library(dplyr)
df_word <- rename(df_word, word=Var1, freq=Freq)
tail(df_word)
#두 글자 이상 단어 추출
df_word <- filter(df_word, nchar(word) >= 2)
tail(df_word)
top_20 <- df_word %>% arrange(desc(freq)) %>% head(20)
top_20
# wordcloud로 출력
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
wordcloud(words=df_word$word, freq=df_word$freq)
wordcloud(words=df_word$word, freq=df_word$freq, min.freq = 2)
wordcloud(words=df_word$word, freq=df_word$freq, min.freq = 2, random.order=F,
colors=brewer.pal(8, "Dark2"))
wordcloud(words=df_word$word, freq=df_word$freq, min.freq = 2, random.order=F,
colors=brewer.pal(8, "Dark2"),
scale=c(4,0,3))
#변수 검토
class(welfare$sex)
table(welfare$sex)
#성별 항목의 이름 변경
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
table(welfare$sex)
install.packages("readxl")
qplot(welfare$sex)
library(dplyr)
qplot(welfare$sex)
library(ggplot2)
qplot(welfare$sex)
summary(welfare$income)
#앗 결측치가 있다
qplot(welfare$income)
qplot(welfare$income) + xlim(0, 1000)
#월급변수에 대한 전처리 : 이상치, 결측치
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
table(is.na(welfare$income))
#성별에 따른 평균 급여
sex_income <- welfare %>% filter(!is.na(income)) %>% group_by(sex) %>% summarise(mean_income = mean(income))
sex_income
#최종 시각화
ggplot(data=sex_income, aes(x=sex, y=mean_income)) + geom_col()
#나이 변수 검토
class(welfare$birth)
summary(welfare$birth)
qplot(welfare$birth)
# 이상치 확인  summary로 확인
summary(welfare$birth)
# 결측치 확인  table로 확인
table(is.na(welfare$birth))
#파생 변수 작성 : age
welfare$age <- 2015 - welfare$birth + 1
summary(welfare$age)
#나이별로 월급여 평균
age_income <- welfare %>% filter(!is.na(income)) %>% group_by(age) %>% summarise(mean_income = mean(income))
head(age_income)
ggplot(data=age_income, aes(x=age, y=mean_income)) + geom_line()
library(ggplot2)
str(ggplot2::mpg)  # ggplot2 는 :: 사용  # mpg : 각자동차의 연비 나타내는거
head(ggplot2::mpg, 50)
class(ggplot2::mpg)
# 배기량이 4이하인 차량의 모델명, 배기량, 생산년도를 출력
mpg %>% filter(displ <= 4) %>% select(model, displ, year)
mpg$test <- ifelse(mpg$displ >= 5, "h", "l")
mpg
mpg %>% filter(mpg$test == "h")
mpg %>% group_by(test) %>% summarise(displ_mean=mean(test))
mpg %>% group_by(test) %>% summarise(displ_mean=mean(displ))
welfare <- welfare %>% mutate(ageg=ifelse(age<30, "young", ifelse(age<=59, "middle", "old")))
table(welfare$ageg)
qplot(welfare$ageg)
ageg_income <- welfare %>% filter(!is.na(income)) %>% group_by(ageg) %>% summarise(mean_income = mean(income))
ageg_income
ggplot(data=ageg_income, aes(ageg, mean_income)) + geom_col()
ggplot(data=ageg_income, aes(ageg, mean_income)) + geom_col() + scale_x_discrete(limits = c("young", "middle", "old"))
# 연령대 및 성별 월급 차이 분석
age_sex_income <- welfare %>% filter(!is.na(income)) %>% group_by(ageg, sex) %>% summarise(mean_income = mean(income))
age_sex__income
age_sex_income
ggplot(data=age_sex_income, aes(ageg, mean_income, fill=sex)) + geom_col() + scale_x_discrete(limits = c("young", "middle", "old"))
ggplot(data=age_sex_income, aes(ageg, mean_income, fill=sex)) + geom_col(position="dodge") + scale_x_discrete(limits = c("young", "middle", "old"))
#나이 및 서별 월급 차이분석
age_sex_income2 <- welfare %>% filter(!is.na(income)) %>% group_by(age, sex) %>% summarise(mean_income = mean(income))
age_sex_income2
ggplot(data=age_sex_income2, aes(age, mean_income, fill=sex)) + geom_col(position="dodge") + scale_x_discrete(limits = c("young", "middle", "old"))
#직업 변수 검토
class(welfare$code_job)
table(welfare$code_job)
read_excel("data/Koweps_Codebook.xlsx", sheet=2, col_names=T)
#변수 검토
class(welfare$religion)
table(welfare$religion)
# 숫자로 표시되기 때문에 보기 좋게 컬럼명 변경
# 종교 (있음 1), (없음 2)
welfare$religion <- ifelse(welfare$religion == 1, "y", "n")
welfare$religion
qplot(welfare$religion)
table(welfare$religion)
qplot(welfare$religion)
#혼인 변수 검토
class(welfare$marriage)
table(welfare$marriage)
#혼인 변수 검토
class(welfare$marriage)
#혼인 변수 검토
class(welfare$marriage)
table(welfare$marriage)
welfare$group_marriage <- ifelse(welfare$marriage == 1, "marriage", ifelse(welfare$marriage==3, "divorce", NA))
table(welfare$marriage)
table(group_marriage)
table(welfare$group_marriage)
qplot(welfare$religion)
qplot(welfare$group_marriage)
religion_marriage <- welfare %>% filter(!is.na(group_marriage)) %>%
group_by(religion, group_marriage) %>%
summarise(n=n()) %>%
mutate(tot_group=sum(n)) %>%
mutate(pct=round(n/ tot_group * 100, 1))
religion_marriage
divorce <- religion_marriage %>% filter(group_marriage == "divorce") %>% select(religion, pct)
divorce
ageg_marriage <- welfare %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(n=n()) %>%
mutate(tot_group=sum(n)) %>%
mutate(pct=round(n/ tot_group * 100, 1))
ageg_marriage
#초년은 제외하고 노년과 중년에서 이혼율표를 다시 작성
ageg_divorce <- ageg_marriage %>% filter(ageg!="young" & group_marriage=="divorce") %>% select(ageg, pct)
ageg_divorce
##test
mpg <- as.data.frame(ggplot2::mpg)
mpg
mpg$displ_val <- ifelse(mpg$displ >= 5, 'h', 'l')
mpg
mpg %>% group_by(mpg$displ_val) %>% summarise(hwy_mean = mean(hwy))
#6
options(scipen=99)
ggplot(data=midwest, aes(x=midwest$poptotal, y=midwest$popasian)) + geom_point() + xlim(0, 300000) + ylim(0, 10000)
ggplot(data=midwest, aes(x=midwest$poptotal, y=midwest$popasian)) + geom_point() + xlim(0, 500000) + ylim(0, 10000)
#6
options(scipen=99)
ggplot(data=midwest, aes(x=midwest$poptotal, y=midwest$popasian)) + geom_point() + xlim(0, 500000) + ylim(0, 10000)
ggplot(data=midwest, aes(x=midwest$poptotal, y=midwest$popasian)) + geom_point() + xlim(0, 500000) + ylim(0, 10000)
########################
#6
mpg
mpg %>% filter(mpg$class = "suv")
mpg %>% filter(mpg$class == "suv")
mpg %>% filter(mpg$class == "suv") %>% group_by(mpg$manufacturer) %>% summarise(avg_cty = mean(cty))
mpg %>% filter(mpg$class == "suv") %>% group_by(manufacturer) %>% summarise(avg_cty = mean(cty))
mpg %>% filter(mpg$class == "suv") %>% group_by(manufacturer) %>% summarise(avg_cty = mean(cty)) %>% order()
mpg %>% filter(mpg$class == "suv") %>% group_by(manufacturer) %>% summarise(avg_cty = mean(cty)) %>% arrange(desc(mean_cty))
mpg %>% filter(mpg$class == "suv") %>% group_by(manufacturer) %>% summarise(avg_cty = mean(cty)) %>% arrange(desc(avg_cty))
ggplot(result, aes(result$manufacturer, result$avg_cty)) +geom_col()
ggplot2(result, aes(result$manufacturer, result$avg_cty)) +geom_col()
ggplot(result, aes(result$manufacturer, result$avg_cty)) +geom_col()
result <- mpg %>% filter(mpg$class == "suv") %>% group_by(manufacturer) %>% summarise(avg_cty = mean(cty)) %>% arrange(desc(avg_cty))
result
ggplot(result, aes(result$manufacturer, result$avg_cty)) +geom_col()
ggplot(result, reorder(aes(result$manufacturer, result$avg_cty))) +geom_col()
ggplot(result, aes(reorder(result$manufacturer, result$avg_cty))) +geom_col()
ggplot(result, aes(reorder(result$manufacturer, result$avg_cty), result$avg_cty)) +geom_col()
ggplot(result, aes(reorder(result$manufacturer, -result$avg_cty), result$avg_cty)) +geom_col()
result <- mpg %>% filter(mpg$class == "suv") %>% group_by(manufacturer) %>% summarise(avg_cty = mean(cty)) %>% arrange(desc(avg_cty)) %>% top_n(5)
result
ggplot(result, aes(reorder(result$manufacturer, -result$avg_cty), result$avg_cty)) +geom_col()
########################
#4
mpg <- mpg %>% mutate(tot  = (cty+hwy)/2, 2)
mpg
########################
#4
mpg <- mpg %>% mutate(tot  = (cty+hwy)/2)
mpg
df_comp <- mpg[mpg$class == "compact", ]
df_comp
df_comp <- mpg %>% filter(class=='compact')
df_comp
df_comp %>% summarise(avg_tot = mean(tot))
df_suv %>% summarise(avg_tot = mean(tot))
df_suv <- mpg %>% filter(class='suv')
df_suv
df_suv <- mpg %>% filter(class='suv')
df_comp
df_suv <- mpg %>% filter(class='suv')
df_suv <- mpg %>% filter(class=='suv')
df_suv
df_suv %>% summarise(avg_tot = mean(tot))
df_comp %>% summarise(avg_tot = mean(tot))
df_suv %>% summarise(avg_tot = mean(tot))
mpg <- as.data.frame(ggplot2::mpg)
########################
#2
midwest <- as.data.frame(ggplot2::midwest)
midwest
midwest
midwest$child_per <- (poptotal-popadults)/poptotal * 100
midwest$child_per <- (midwest$poptotal-midwest$popadults)/midwest$poptotal * 100
midwest
midwest$child_per <- (midwest$poptotal-midwest$popadults)/midwest$poptotal * 100 %>% arrange(desc(midwest$child_per))
midwest  %>% arrange(desc(midwest$child_per))
midwest  %>% arrange(desc(midwest$child_per)) %>% head(5)
midwest  %>% select(midwest$child_per) %>% arrange(desc(midwest$child_per)) %>% head(5)
midwest %>% select(midwest$child_per) %>% arrange(desc(midwest$child_per)) %>% head(5)
midwest %>% arrange(desc(midwest$child_per)) %>% head(5) %>% select(midwest$child_per)
midwest %>% arrange(desc(midwest$child_per)) %>% head(5)
midwest %>% select(child_per)
midwest %>% select(child_per) %>% arrange(desc(midwest$child_per)) %>% head(5)
midwest
midwest %>% select(county,child_per) %>% arrange(desc(midwest$child_per)) %>% head(5)
