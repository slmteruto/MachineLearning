t.test(sleep$extra ~ sleep$group, data=sleep, paired = T)
with(sleep, t.test(extra ~ group, data=sleep, paired=T))
#만약 정규분포가 아니라면
wilcox.test(sleep$extra[sleep$group==2]~ sleep$extra[sleep$group==1])
with(sleep, wilcox.test(extra[group==2]~ extra[group==1]))
#만약 정규분포가 아니라면
wilcox.test(sleep$extra[sleep$group==2] - sleep$extra[sleep$group==1])
with(sleep, wilcox.test(extra[group==2] - extra[group==1]))
#또는
with(sleep, wilcox.test(extra[group==2] - extra[group==1], exact=F))
#정규분포 확인을 위한 또다른 방법
out = aov(LDLC ~ Dx, data=acs)
out
shapiro.test(resid(out))  #resid : 편차를 구하는 함수
#등분산 확인
bartlett.test(LDLC ~ Dx, data=acs)
# 정규분포이고 등분산이라면 : aov()
aov(LDLC ~ Dx, data=acs)
summary(aov)
# 정규분포이고 등분산이라면 : aov()
out = aov(LDLC ~ Dx, data=acs)
summary(out)
# 연속변수가 아니거나 정규분포가 아닐 때  : krustal.test()
krustal.test(LDLC ~ Dx, data=acs)
install.packages("krustal")
# 연속변수가 아니거나 정규분포가 아닐 때  : kruskal.test()
kruskal.test(LDLC ~ Dx, data=acs)
# 정규분포는 맞고 등분산이 아니라면 : oneway.test()  oneway ANOVA
oneway.test(LDLC ~ Dx, data=acs)
# 사후검정
# avo() 사용했을 때 사후 검정 : TukeyHSD()
TukeyHSD(out)
str(InsectSprays)
install.packages("userfriendlyscience")
moonBook::densityplot(count ~ spray, data=InsectSprays)
posthocTGH(x=InsectSprays$spray, y=InsectSprays$count, method="games-howell")
library(userfriendlyscience)
install.packages("mnormt")
library(userfriendlyscience)
install.packages("userfriendlyscience")
library(userfriendlyscience)
library(userfriendlyscience)
posthocTGH(x=InsectSprays$spray, y=InsectSprays$count, method="games-howell")
install.packages("userfriendlyscience")
library(userfriendlyscience)
install.packages("mnormt")
install.packages("nparcomp")
library(nparcomp)
result <- mctp(LDLC ~ Dx, data=acs)
summary(result)
#정규 분포인가
out <- aov(Sepa.width ~ Species, data=iris)
shapiro.test(resid(out))
#정규 분포인가
out <- aov(Sepal.width ~ Species, data=iris)
shapiro.test(resid(out))
######################################################################################
head(iris)
#정규 분포인가
out <- aov(Sepal.Width ~ Species, data=iris)
shapiro.test(resid(out))
# 등분산인가
bartlett.test(Sepal.Width ~ Species, data=iris)
summary(out)
TukeyHSD(out)
#####################################################################################
mydata <- read.csv("data/anova_one_way.csv")
View(mydata)
out <- aov(birth_rate ~ ad_layer, data=mydata)
shapiro.test(resid(out))
kruskal.test(birth_rate ~ ad_layer, data=mydata)
out <- aov(birth_rat, ad_layer + multichild, data=mydata)  # +로 연결한다.
shapiro.test(resid(out))
out <- aov(birth_rate, ad_layer + multichild, data=mydata)  # +로 연결한다.
shapiro.test(resid(out))
out <- aov(birth_rate ~ ad_layer + multichild, data=mydata)  # +로 연결한다.
summary(out)
out <- aov(birth_rate ~ ad_layer + multichild + ad_layer:multichild, data=mydata)  # +로 연결한다.
mydata <- read.csv("data/anova_two_way.csv")
head(mydata)
out <- aov(birth_rate ~ ad_layer + multichild + ad_layer:multichild, data=mydata)  # +로 연결한다.
out <- aov(birth_rate ~ ad_layer + multichild + ad_layer:multichild, data=mydata)  # +로 연결한다.
shapiro.test(resid(out))
summary(out)
TukeyHSD(out)
# 정규분포
library(reshape)
boxplot(value ~ X2, data=rt1)
rt1 <- reshape::melt(RoundingTimes)
rt1
out <- aov(value ~ X2, data=rt1)
# 정규분포
library(reshape)
rt1 <- reshape::melt(RoundingTimes)
rt1
RoundingTimes <-
matrix(c(5.40, 5.50, 5.55,
5.85, 5.70, 5.75,
5.20, 5.60, 5.50,
5.55, 5.50, 5.40,
5.90, 5.85, 5.70,
5.45, 5.55, 5.60,
5.40, 5.40, 5.35,
5.45, 5.50, 5.35,
5.25, 5.15, 5.00,
5.85, 5.80, 5.70,
5.25, 5.20, 5.10,
5.65, 5.55, 5.45,
5.60, 5.35, 5.45,
5.05, 5.00, 4.95,
5.50, 5.50, 5.40,
5.45, 5.55, 5.50,
5.55, 5.55, 5.35,
5.45, 5.50, 5.55,
5.50, 5.45, 5.25,
5.65, 5.60, 5.40,
5.70, 5.65, 5.55,
6.30, 6.30, 6.25),
nrow = 22,
byrow = TRUE,
dimnames = list(1 : 22, c("Round Out", "Narrow Angle", "Wide Angle")))
# 정규분포
library(reshape)
rt1 <- reshape::melt(RoundingTimes)
rt1
out <- aov(value ~ X2, data=rt1)
shapiro.test(resid(out))
friedman.test(RoundingTimes)
#friedman 사후검정은 조금 복잡하다
friedman.test.with.post.hoc <- function(formu, data, to.print.friedman = T, to.post.hoc.if.signif = T,
to.plot.parallel = T, to.plot.boxplot = T,
signif.P = .05, color.blocks.in.cor.plot = T,
jitter.Y.in.cor.plot =F)
friedman.test.with.post.hoc()
friedman.test.with.post.hoc(value ~ X2 | X1, rt1)
mydata <- read.csv("data/10_rmanova.csv")
mydata
#long형으로 구조 변경
reshape(mydata, direction = "long", varying=3:6)
#long형으로 구조 변경
ac1 <- reshape(mydata, direction = "long", varying=3:6, sep="")
ac1
ac2 <- reshape2:metl(mydata, id=c("group", "id"), variable.names="time",
value.name="month",
measure.vars = c("month0", "month1", "month3", "month6"))  #id값, 변수값, 값이름,
library(reshape2)
ac2 <- reshape2:metl(mydata, id=c("group", "id"), variable.names="time",
value.name="month",
measure.vars = c("month0", "month1", "month3", "month6"))  #id값, 변수값, 값이름,
ac2 <- reshape2::metl(mydata, id=c("group", "id"), variable.names="time",
value.name="month",
measure.vars = c("month0", "month1", "month3", "month6"))  #id값, 변수값, 값이름,
ac2 <- reshape2::melt(mydata, id=c("group", "id"), variable.names="time",
value.name="month",
measure.vars = c("month0", "month1", "month3", "month6"))  #id값, 변수값, 값이름,
ac2
?interaction.plot
#여기 옵션을보면 factor라는게 있는데
str(ac1)
class(ac1$group)
ac1$group <- factor(ac1$group)
ac1$id <- factor(ac1$id)
ac1$time <- factor(ac1$time)
str(ac1)
interaction.plot(ac1$time, ac1$group, ac1$month)
out < -aov(month ~ group*time + Error(id), data=ac1) #다른관점에서 조합이 되는 것이라서 + 가아닌 *로 한다.
#Error옵션을 해주면 자세한 출력결과를 보여준다.
summary(out)
out < -aov(month ~ group*time + Error(id), data=ac1) #다른관점에서 조합이 되는 것이라서 + 가아닌 *로 한다.
out <- aov(month ~ group*time + Error(id), data=ac1) #다른관점에서 조합이 되는 것이라서 + 가아닌 *로 한다.
#Error옵션을 해주면 자세한 출력결과를 보여준다.
summary(out)
#정규분포라는 가정하에 진행한다.
ac0 <- ac1[ac1$time == "0", ]
ac0
t.test(month ~ group, data=ac0)
t.test(month ~ group, data=ac0)  #p-value에는 엄청 차이가 없다.
t.test(month ~ group, data=ac1)  #p-value에는 엄청 차이가 없다.
t.test(month ~ group, data=ac3)  #p-value에는 엄청 차이가 없다.
ac3 <- ac1[ac1$time == "3", ]  #time이 3인것만
ac6 <- ac1[ac1$time == "6", ]  #time이 6인것만
t.test(month ~ group, data=ac3)  #p-value에는 엄청 차이가 없다.
t.test(month ~ group, data=ac6)  #p-value에는 엄청 차이가 없다.
#long형으로 구조 변경
ac1 <- reshape(mydata, direction = "long", varying=3:6, sep="")
ac1
library(reshape2)
ac2 <- reshape2::melt(mydata, id=c("group", "id"), variable.names="time",
value.name="month",
measure.vars = c("month0", "month1", "month3", "month6"))  #id값, 변수값, 값이름,
ac2
?interaction.plot
#여기 옵션을보면 factor라는게 있는데 우리의 데이터는 fact형이 아니다. vector형이다.
str(ac1)
class(ac1$group)
ac1$group <- factor(ac1$group)
ac1$id <- factor(ac1$id)
ac1$time <- factor(ac1$time)
str(ac1)
interaction.plot(ac1$time, ac1$group, ac1$month)
out <- aov(month ~ group*time + Error(id), data=ac1) #다른관점에서 조합이 되는 것이라서 + 가아닌 *로 한다.
#Error옵션을 해주면 자세한 출력결과를 보여준다.
summary(out)
#정규분포라는 가정하에 진행한다.
ac_0 <- ac1[ac1$time == "0", ]  #time이 0인것만
ac_1 <- ac1[ac1$time == "1", ]  #time이 1인것만
ac_3 <- ac1[ac1$time == "3", ]  #time이 3인것만
ac_6 <- ac1[ac1$time == "6", ]  #time이 6인것만
t.test(month ~ group, data=ac_0)  #p-value에는 엄청 차이가 없다.
t.test(month ~ group, data=ac_1)  #p-value가 0.08이므로 차이가 있다고 할 수 있다.
t.test(month ~ group, data=ac_6)  #p-value가 요놈도 엄청 차이가 있다. ``
t.test(month ~ group, data=ac_3)  #p-value가 0.01이라서 엄청 차이가 있다.
t.test(month ~ group, data=ac_1)  #p-value가 0.08이므로 차이가 있다고 할 수 있다.
t.test(month ~ group, data=ac_0)  #p-value에는 엄청 차이가 없다.
0.05 /6    # 6인 이유는 4C2 이다.  4개중에 2개를 뽑은거기 때문에
table(mtcars$cyl, mtcars$am)
# 가독성을 위해 테이블 수정
mtcars$tm <- ifelse(mtcars$am == 0, "automatic", "manual")
result <- table(mtcars$cyl, mtcars$tm)
result
addmargins(result)
chisq.test(result)
chisq.test(result)
fisher.test(result)
str(acs)
table(acs$HBP, acs$smoking)
#컬럼의 순서를 바꾸기
asc$smoking <- factor(acs$smoking, levels = c("Never", "Ex-smoker", "Smoker"))
#컬럼의 순서를 바꾸기
asc$smoking <- factor(acs$smoking, levels = c("Never", "Ex-smoker", "Smoker"))
#컬럼의 순서를 바꾸기
acs$smoking <- factor(acs$smoking, levels = c("Never", "Ex-smoker", "Smoker"))
result = table(acs$HBP, acs$smoking)
result
# x에 해당하는 값 (고혈압 발생횟수)
result[2.]
# x에 해당하는 값 (고혈압 발생횟수)
result[2,]
prop.trend.test(result[2, ], colSums(result))
mytable(smoking ~ age, data=acs)
#모자이크 그래표
mosaicplot(result)
#모자이크 그래표
mosaicplot(result)
mosaicplot(result, color=c())
colors()
demo("colors")
mydata <- read.csv("data/anova_two_way.csv")
head(mydata)
install.packages("UsingR")
library(UsingR)
plot(child-parent, data=galton)
View(galton)
plot(child ~ parent, data=galton)
cor(galton$child, galton$parent) # 둘다 연속 변수
cor.test(galton$child, galton$parent) # 둘다 연속 변수
out = lm(child~parent, data=galton)
summary(out)
abline(out, col="red")
plot(jitter(child, 5) ~ jitter(parent, 5), data=galton) #jitter 흔든다는 뜻?
sunflowerplot(galton)
View(mydata)
str(mydata)
plot(mydata$pop_growth, mydata$elderly_rate)
mydata <- read.csv("data/cor.csv")
View(mydata)
plot(mydata$pop_growth, mydata$elderly_rate)
plot(mydata$pop_growth, mydata$elderly_rate, method="person")
plot(mydata$pop_growth, mydata$elderly_rate, method="pearson")
cor(mydata$pop_growth, mydata$elderly_rate, method="pearson")
cor(mydata$pop_growth, mydata$elderly_rate, method="pearson")
cor(mydata$pop_growth, mydata$elderly_rate, method="spearson")
# 많은 변수에 대해서 상관분석을 해야한다면
cbind(mydata$pop_growth, mydata$birth_rate, mydata$elderly_rate, mydata$finance, mydata$cultural_center)
# 많은 변수에 대해서 상관분석을 해야한다면
x <- cbind(mydata$pop_growth, mydata$birth_rate, mydata$elderly_rate, mydata$finance, mydata$cultural_center)
cor(x)
str(women)
plot(weight ~ height, data=women)
lm(weight ~ height, data=women)
summary(fit)
fit <- lm(weight ~ height, data=women)  # 절편과 기울기를 구해줌
summary(fit)
abline(fit)
abline(fit, colors="blue") #가장 적정선을 찾아준다.
abline(fit, col="red") #가장 적정선을 찾아준다.
abline(fit, col="red") #가장 적정선을 찾아준다.
abline(fit, col="blue") #가장 적정선을 찾아준다.
abline(fit, col="red") #가장 적정선을 찾아준다. col은 색깔
abline(fit) #가장 적정선을 찾아준다. col은 색깔
abline(fit, col="red") #가장 적정선을 찾아준다. col은 색깔
abline(fit, col="blue") #가장 적정선을 찾아준다. col은 색깔
cor.test(women$weight, women$height)
#cor 0.9954948은 상관계수
0.995^2
#cor 0.9954948은 상관계수
0.9954948^2 0.991
#cor 0.9954948은 상관계수
0.9954948^2 #0.991
cor.test(women$weight, women$height)
summary(fit)  #별이 세개 찍힌건 엄청 강한관계를 뜻함.
#다항 회귀 분석
#(다중과는 좀 다름) y = ax
lm(weight ~ height+ I(height^2), data=women)
#수식이 하나 더 추가 된것
# I() 항 추가하는 함수
# height^2 를 넣어서 2차함수로 만든것
summary(fit2)
#다항 회귀 분석
#(다중과는 좀 다름) y = ax
fit2 <- lm(weight ~ height+ I(height^2), data=women)
#수식이 하나 더 추가 된것
# I() 항 추가하는 함수
# height^2 를 넣어서 2차함수로 만든것
summary(fit2)
plot(fit2)
plot(weight ~ height, data=women)
lines(women$height, fitted(fit2), col="red")
plot(fit) #직선
par(mfrow=c(2,2))
plot(fit) #직선
# 3차원으로 하면 더 좋아지나??
fit3 <- lm(weight ~ height + I(height^2) + I(height^3), data=women)
summary(fit3)
#??? 0.9998나옴  높긴하다.
par(mfrow=c(2,2))
plot(fit3)
mydata
#########################################################################################
mydata <- read.csv("data/regression.csv")
mydata
#########################################################################################
mydata <- read.csv("data/regression.csv")
head(mydata)
fit <- lm(y ~ x, data=mydata)
summary(fit)
# 1. 종속변수, 독립변수 뽑기
# 종속변수
y = cbind(mydata$birth_rate)
y
# 독립변수
x = cbind(mydata$kindergarten)
# 독립변수
x = cbind(mydata$kindergarten)
fit <- lm(y ~ x, data=mydata)
summary(fit)
plot(fit)
# x나 y에 log를 해본다.
fit2 <- lm(log(y) ~ log(x), data = mydata)
summary(fit2)
plot(fit2)
shapifo.test(resid(fit))
shapiro.test(resid(fit))
shapiro.test(resid(fit2))
fit3 <- lm(y ~ d, data=mydata)
summary(fit3)
fit3 <- lm(y ~ d, data=mydata)
d <- cbind(mydata$dummy)
fit3 <- lm(y ~ d, data=mydata)
summary(fit3)
plot(3)
fit3 <- lm(y ~ d, data=mydata)
summary(fit3)
d
plot(3)
plot(fit3)
fit3 <- lm(y ~ d, data=mydata)
summary(fit3)
plot(fit3)
d <- cbind(mydata$dummy)
fit3 <- lm(y ~ d, data=mydata)
summary(fit3)
d
plot(fit3)
par(mfrow=c(2, 2))
plot(fit3)
# 종속 변수 : 살인사건 발생률이 무엇에 영향을 받는지 알아야하므로
states <- as.data.frame(state.x77[, c("Murder", "Population", "Illiteracy", "Income", "Frost")])
states
# 컬럼이 너무 많으면 위 방법을 쓰기 어려우므로 이 방법을 사용한다.
fit <- lm(Murder ~ ., data=states)  # . 의 의미는 종속변수를 제외하고 나머지 다 라는 의미이다.
summary(fit)
install.packages("car")
libraray(car)
library(car)
sqrt(vif(fit))
par(mfrow=c(1,1))
influencePlot(fit, id=list(method="identify"))  #car 패키지에 있는 함수
influencePlot(fit, id=list(method="identify"))  #car 패키지에 있는 함수
par(mfrow=c(2,2))
plot(fit)
powerTransform(states$Murder) #이 함수는
# 뭔소리야..
summary(powerTransform(states$Murder))
# 선형성에 대한 교정
boxTidwell(Murder ~ Population + Illiteracy, data=states)
ncvTest(fit)
spreadLevelPlot(fit)
plot(fit)
spreadLevelPlot(fit)
summary(fit1)
fit1 <- lm(Murder ~ ., data=states)
summary(fit1)
fit2 <- lm(Murder, Population + Illiteracy, data=states)
summary(fit2)
fit2 <- lm(Murder ~ Population + Illiteracy, data=states)
summary(fit2)
fit3 <- lm(Murder ~ Income + Frost, data=states)
summary(fit3)
# AIC(Akaite's An Information Criterion) -> 이걸 이용하면 한번에 수치가 나와서 선택하기 좋다 .
?AIC()
AIC(fit1, fit2)
AIC(fit1, fit2, fit3)
reduced.model <- step(full.model, direction = "backward")
# Backward stepwise Regression
# 우선 변수생성
full.model <- lm(Mulder ~ ., data=states)  # 처음엔 4개변수 다 가져오는걸로 시작
reduced.model <- step(full.model, direction = "backward")
# Backward stepwise Regression
# 우선 변수생성
full.model <- lm(Murder ~ ., data=states)  # 처음엔 4개변수 다 가져오는걸로 시작
reduced.model <- step(full.model, direction = "backward")
reduced.model <- step(full.model, direction = "backward", trace=1)
reduced.model <- step(full.model, direction = "backward", trace=0)
reduced.model <- step(full.model, direction = "backward", trace=0)
reduced.model
### Foward stepwise Regression
min.model <- lm(Murder ~ 1, data=states)  # 처음엔 최소변수로만 시작
### Foward stepwise Regression
min.model <- lm(Murder ~ 1, data=states)  # 처음엔 최소변수로만 시작
fwd.model <- step(min.model, direction="forward", scope=(Muder ~ .))
fwd.model <- step(min.model, direction="forward", scope=(Muder ~ Population + Illiteracy + Income + Frost))
# all subset Regression(모두 다 해보는것)을 사용한다.
install.packages("leaps")
library(leaps)
le <- regsubsets(Muder ~ Population + Illiteracy + Income + Frost, data=states, nbest = 4)  #종속변수, 원인변수를 넘겨준다
le
le <- regsubsets(Murder ~ Population + Illiteracy + Income + Frost, data=states, nbest = 4)  #종속변수, 원인변수를 넘겨준다
le
# 얘는 그래프를 그려야 뭔가 나옴
plot(le, scale="adjr2")
# 얘는 그래프를 그려야 뭔가 나옴
par(mfrow=c(1,1))
plot(le, scale="adjr2")
# 샘플 데이터 사용
library(survival)
str(colon)
#전처리
table(is.na(colon))
colon1 <- na.omit(colon)
result <- glm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg + node4 + time,
family = binomial, data=colon1)
summary(result)
result <- glm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg + node4,
family = binomial, data=colon1)
summary(result)
# 요놈도 회귀분석이니까 stepwise를 쓸 수 있다.
# Backward
full.model <- lm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg + node4, data=colon1)  # 처음엔 4개변수 다 가져오는걸로 시작
reduced.model <- step(full.model, direction = "backward", trace=0)
reduced.model
reduced.model <- step(full.model, direction = "backward", trace=1)
result <- glm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg,
family = binomial, data=colon1)
summary(result)
# 요놈도 회귀분석이니까 stepwise를 쓸 수 있다.
# Backward
full.model <- lm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg, data=colon1)  # 처음엔 4개변수 다 가져오는걸로 시작
reduced.model <- step(full.model, direction = "backward", trace=1)
reduced.model
reduced.model <- step(full.model, direction = "backward", trace=1)
colon1 <- na.omit(colon)
result <- glm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg,
family = binomial, data=colon1)
# 요놈도 회귀분석이니까 stepwise를 쓸 수 있다.
# Backward
full.model <- lm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg, data=colon1)  # 처음엔 4개변수 다 가져오는걸로 시작
reduced.model <- step(full.model, direction = "backward", trace=1)
library(moonBook)
extrackOR(reduce.model1)
library(moonBook)
extrackOR(reduce.model1)
install.packages("extrackOR")
extractOR(reduce.model)
extractOR(reduced.model)
#binomial로 할때
fit1 <- glm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg,
family = binomial, data=colon1)
fit2 <- glm(status ~ rx + sex + age + obstruct + perfor + adhere +nodes + differ + extent +surg,
family = quasibinomial, data=colon1)
?pchisq()
summary(fit1)
summary(fit1)
pchisq(summary(fit2)$dispersion)  #서머리 결과중 dispersion  결과만 뽑아오기
pchisq(summary(fit2)$dispersion * fit1$df.residual, fit1$df.residual, lower=F)
pchisq(summary(fit1)$dispersion * fit1$df.residual, fit1$df.residual, lower=F)
pchisq(summary(fit2)$dispersion * fit1$df.residual, fit1$df.residual, lower=F)
ORplot(fit1)  #인자로 그냥 만든 fit을 쓰기만 하면 된다
ORplot(fit1, main="Plot for Odds Ratios", type=2)
ORplot(fit1, main="Plot for Odds Ratios") # 제목
ORplot(fit1, main="Plot for Odds Ratios", type=2)
ORplot(fit1, main="Plot for Odds Ratios") # 제목
ORplot(fit1, main="Plot for Odds Ratios", type=2)
ORplot(fit1, main="Plot for Odds Ratios", type=2)
ORplot(fit1, main="Plot for Odds Ratios", type=3)
ORplot(fit1, main="Plot for Odds Ratios", type=1)
ORplot(fit1, main="Plot for Odds Ratios", type=4)
ORplot(fit1, main="Plot for Odds Ratios", type=5)
ORplot(fit1, main="Plot for Odds Ratios", type=2)
ORplot(fit1, main="Plot for Odds Ratios", type=2, show.OR = F) #Odds Rate를 보여줄까 말까 (F :안보여줌)
ORplot(fit1, main="Plot for Odds Ratios", type=2, show.OR = F, show.CI = T)
ORplot(fit1, main="Plot for Odds Ratios", type=2, show.OR = F, show.CI = T, pch=15) # pch : 점의 모양
