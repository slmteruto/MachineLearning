시험

최대한 작성한 내용들 중

최대한 우리가 한 예제




서술형
1. ncs
2. ncs

3. 변수의 특징 (3가지 이상)
    - 별도의 절차없이 사용가능
    - 데이터 타입을 가리지않음(dynamic 할당방식)
    - 변수는 값을 수정할 수 없다.

4. 자료형의 종류들  (무엇이 있나)
    - 기본자료형 : int, float, str, complex, function
                    한줄 요약 : 같은 타입만 저장할 수 있음. 
                    
    - 집합자료형 : list, tuple, set, dict


5. 수정유무 (자료형들)
    - 수정불가능 : int, float, str, tuple, bool, complex
    - 수정 가능  : list, dict, set
    
    
6. 함수 - 장점서술, 설계시 주의점
  장점
    - 반복적인 코드를 없애주어 코드의 길이를 짧게 만든다.
    - 프로그램의 유지보수를 쉽게 만들어준다.

  설계시 주의점
    - 재사용성이 확실히 있나.
    - 단일 기능인가  (기능의 정체성을 가지고 있을 것)


7. 객체설계 5원칙 (SOLID 약자 풀어서)
    - SRP(단일 책임 원칙)        Single Responsibility Principle

    - OCP(개방-폐쇄 원칙)        Open Close Principle

    - LSP(리스코프 치환 원칙)    The Liskov Substitution Principle

    - ISP(인터페이스 분리 원칙)  Interface Segregation Principle

    - DIP(의존 역전 원칙)        Dependency Inversion Principle

    


8. _, __
    1) _ : 기본 인터프리터(명령프롬프트)에서 사용, 최근사용한 값을 _ 라는 이름으로 저장된다.(연산도 가능)
         : 값을 무시할 때(자주사용)
         : 변수명과 함께 사용(접근 권한), __와 함께 사용

    2) __ : (접근권한)__ 이게 좀 더 강한 의미


9. 상속설계시 유의점(3가지 이상)
    - 부모 클래스는 최소한의 코드로 작성
    - 중복된 코드가 있어서는 안됨 (부모 자식간)
    - 상속받은 자식 클래스는 반드시 기능을 확장(추가)시켜야 한다.


10. OVERRIDING 개념, 용도 (10점)

개념 : 재정의
용도 : 다현성(표준화) 구현, 같은 함수를 재정의 함으로써 다양하게 함수를 사용할 수 있음.

11. 생략  (5점)

추측 1. 객체정의
    상속성
    다양성
    캡슐화

추측 2. 파이썬 특징
인터프리터 언어
동적할당

---------------------------------
실습형 (3개 이상)
1. 윤년 계산 프로그램

    < 02 - 제어문 초반>

        year = int(input("연도 입력"))

        if ((year % 4 == 0) and (year % 100 !=0)) or (year % 400 == 0):
            print("윤년")
        else :
            print("평년")
            
2. 가위바위보 게임 (제어문, 클래스 또는 함수 사용)

3. 별 정삼각형 그리기
    < 02 - 제어문 마지막>
        num = int(input("몇줄?"))
        for i in range(num) :
            print(" "*(num-i), end = "")
            for j in range((num-1-i), (num+i)) :
                print("*", end="")
            print()
4. 전자계산기 (제어문, 클래스 이용)

5. 결과값 보고 클래스 설계 (객체 설계하고 클래스 설계하고 그랬던거)

    < 03 - 함수 내장함수부분>
        def pzz_order(pzz_size, *pzz_top) :
            print("{} size 피자를 주문하셨습니다.".format(pzz_size))
            print("토핑 : ", end = "")
            count = 0
            for i in pzz_top :
                if count < len(pzz_top)-1 :
                    print(i, end = ", ")
                    count += 1
                else :
                    print(i)
            return