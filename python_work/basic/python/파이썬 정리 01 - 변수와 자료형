
1.변수 (Variable)
    - 별도의 절차없이 사용가능
    - 데이터 타입을 가리지않음(dynamic 할당방식)
    - 변수는 값을 수정할 수 없다.
------------------------------------------------------------------------------------------------------------
2. 자료형 (Data Type)
  종류
    - 기본자료형 : int, float, str, complex, function
                    한줄 요약 : 같은 타입만 저장할 수 있음. 
    - 집합자료형 : list, tuple, set, dict

        
  수정
    - 수정불가능 : int, float, str, tuple, bool, complex
    - 수정 가능  : list, dict, set
    
    
    str1 = "Life is too short, You need python"

    # 값 선택
        #맨 앞에서부터
        print(str1[10])

        #맨 뒤에서부터
        print(str1[-1])

        #0~33까지 총 34개
        print(len(str1))
        print(str1[33])

    #Slicing
        print(str1[0:10])

        #처음부터~ 6
        print(str1[:6])
    
        #6부터 ~ 끝
        print(str1[6:])

        #전체
        print(str1[:])

        #-로 쓰려면 
        print(str1[-7:-1])
    
    
# count(), find(), index(), join(), split() .....

    #join
    str1 = ",,"
    str2 = "abcdefg"

    #str2에 조인을 한다.
        str3 = str1.join(str2)
    #str1에 조인을 한다.
        str4 = str2.join(str1)


    #split  
    #공백을 기준으로 분리
        str1 = "Life is too short"
        print(str1.split())


    #,을 기준으로 분리
        str1 = "홍길동, 홍경래, 임경업, 임꺽정"
        print(str1.split(','))

    # 단어를 기준으로 분리
        print(str1.split('홍'))


    #count  
        print(str1.count("홍"))


    #len  길이
        print(len(str1))


    #index  단어위치 찾기, 찾는 문자가 없으면 에러가 남
        print(str1.index("길"))


    #find   단어위치 찾기, 찾는 문자가 없으면 -1을 반환
        print(str1.find("김"))


    #공백제거 lstrip(), rstrip(), strip()
        str1 = "      python      "

        print(str1.lstrip())
        print(str1.rstrip())
        print(str1.strip())

    #특정문자 제거
        str1 = "...python"
        print(str1.strip("."))

    #바꾸기  replace(), maketrans(), translate()
        str1 = "Hello, World"
        print(str1.replace("ello","i"))

    # 같은 길이로만 바꿀수 있다.
        print(str1.translate(str.maketrans("ld", "aa")))



List
    - 임의의 객체를 순차적으로 저장하는 집합적 자료형
    - 각값에 대해서 인덱스가 부여
    - 변경 가능
    - [] 이용

    #복사 얕은복사 = 주소 복사
        b = a
        b[0] = 10

    #깊은복사 = 데이터를 복사
        a = [1,2,3,4,5]
        b = a[:]

    #1. 우선 선언
        a = []

    #2. 리스트 함수 선언
        b = list()

    #3. 범위만큼 생성
        c = list(range(10))
        d = list(range(5, 12, 2))
        d = list(range(17, 12, -1))

    #insert  원하는 위치에 값을 넣을 수 있음.
    a.insert(0,0)
    print(a)

    a.insert(2, 8)
    print(a)

    #append, extend는 위치지정 불가, 마지막에만 붙는다.
    #append는 하나만 추가됨
    a.append(4)
    print(a)

    a.append([88,22])
    print(a)

    #extend는 확장
    a.extend([5,20,3])
    print(a)

    # a+[5,20,3] 이랑 같다.

    # 삭제, 제거
    a = [1, 2, 3, 1, 2, 3]


    #1. 삭제 범위 지정
    a[3:6] = []
    print(a)

    # remove 사용, 삭제할 값을 파라미터로 사용
    # 파라미터 중 첫번재 값이 삭제가 됨
    a = [1, 2, 3, 1, 2, 3]
    a.remove(2)
    print(a)


    # del 사용, 해당 인덱스의 값 삭제
    a = [1, 2, 3, 1, 2, 3]
    del a[3]
    print(a)

    #전체삭제는 del a


    #정렬

    a = [1,4,3,2]
    a.sort()
    print(a)

    #내림차순으로 정렬하려면 한번은 오름차순으로 정렬해놔야함
    a.reverse()

Tuple
    - list와 거의 동일
    - list는 [ ], tuple은 ( )
    - 변경 불가
    - 변경이 불가능하기 때문에 처리속도가 빠름

    #선언
    a = 'a', 'b', 'c', 'd'

    a, b, c = (10, 20, 30)
    # a,b,c = 10, 20, 30 같음
    
    #여러 데이터를 하나로 모으는 것을 packing 이라고 함
    a = (10, 20, 30)
    
    #이렇게 데이터를 풀어놓는것을 unpacking 이라고 함
    a1, a2, a3 = a
    


dict (dictionary)
    - 순서가 없음 (내가 차례대로 넣어도 무작위로 저장)
    - {키:값}
    - 키를 이용해서 값을 조회

    #선언
    a = {"name":"홍귈동", "phone":"111-1111", "age":34}

    #출력방법
    print(a["name"], a["phone"])
    print(a.get("name"), a.get("age"))

    #키값만 출력 (list로 출력)
    print(a.keys())
    #값만 출력
    print(a.values())
    #전체 (Tuple로 가져와서 list로 뿌려준다구?)
    print(a.items())

    # items는 새로운 자료형이 됨?
    b = a.items()
    print(type(b))

    # 사용할 땐 형변환해서 쓴다.
    b = list(a.items())


    # 값 변경
    # list 변경
    a["name"] = "임꺽정"

    # 삭제
    del a["age"]
    print(a)

    ## 풀 삭제
    a.clear()

Set
    - { } 사용 (dict랑 같음, 모양만 같음) // {'a', 'b', 'c', 'd'} 이런 형태
    - 키:값이 아니고 하나의 데이터임   
    - 다만 순서가 없다.
    - 근데 왜 쓰냐,  중복이 안된다. -> 중복된 데이터는 알아서 걸러버림

    a = {1,3, 5,4, 2,1} # 중복저장은 알아서 삭제됨, 또 정렬됨
    # print(a[1]) 순서가 없으므로 인덱스를 쓸 수 없다. 쓰려면 list로 변환 후 사용

    s1 = {1,2,3,4,5,6}
    s2 = {4,5,6,7,8,9}

    #합집합  set에서만 사용
    print(s1.union(s2))

    #교집합
    print(s1.intersection(s2))

    #차집합
    print(s1.difference(s2))

    #여러개 동시 추가 update
    s1 = {1,2,3,4,5,6}
    s1.update([7,8])
    print(s1)

    #한개만 추가  add
    s1 = {1,2,3,4,5,6}
    s1.add(9)
    print(s1)

    #데이터 삭제 remove, discard
    #차이점은 해당 값이 없으면 remove는 에러, discard 그냥 수행
    s1.remove(9)
    print(s1)

    s1.discard(7)
    print(s1)

------------------------------------------------------------------------------------------------------------

3. 연산자
1) 산술연산자
    +, -, *, /, %, //(몫을 정수만 표시), **(거듭제곱)
2) 비교연산자 (결과 True/False)
    >, <, >=, <=, ==, !=
3) 논리연산자 (결과 True/False) // 단락회로
    and, or, not(단항연산자)

    and 일시  xx and xx and xx and.... 일때 하나만 false만 나오면 바로 뒤 연산을 다 막아버림(그래서 단락회로), 
    그래서 간혹 이경우가 비트연산자보다 빠를 경우도 있음
4) 대입(치환,할당)연산자
    대입연산자  : =
    복합대입연산자  : +=, -=, *=, /=  ...
    ==========================================

5) 포함여부 연산자
    in, not in
    
6) 비트 연산자
    <<, >>, &, |, ^(XOR), ~ ...


        ********************************    
        a   b  *    a&b     a|b     a^b
        ********************************
        T   T  *     T       T       F
        T   F  *     F       T       T
        F   T  *     F       T       T
        F   F  *     F       F       F


*XOR은 암호화 복호화 하는데 사용할 수도 있다.
#비트연산자2
    password = 920339
    key = 593201

#암호화
    cryt = password^key
    print(cryt)

#복호화
    print(cryt^key)


