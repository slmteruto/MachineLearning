
1. MySQL의 클라이언트 프로그램

    1) 콘솔 : mysql.exe
            mysql [-h아이피] -u유저명 -p패스워드
            mysql [-h아이피] -u유저명 -p
            
    2) 윈도우 : WorkBench, HeidiSQL


관계형 DB의 특징
    1) 데이터의 분류, 정렬, 탐색속도가 빠르다
    2) 오래동안 사용된만큼 신뢰성이 높다, 어떤 상황에서도 데이터의 무결성 보장
    3) 실시간(온라인) 접근(처리)이 가능(OLTP)
    4) 기존에 작성된 스키마를 수정하기가 어렵다.
    5) 데이터베이스의 부하를 분석하는 것이 어렵다.



2. 데이터 베이스의 저장 형태

    1) 계층형 DB : Tree           (윈도우 registry)
    
    2) 네트워크형 DB : Graph       (너무 복잡해서 상품화되진않음)
    
    3) 관계형 DB : Table          (현재DB)
    
    4) 객체지향형 DB :  Object     (Oracle)  (너무 어려워서 잘 안됨)
                        테이블의 형태로 한계가 있어서 발전시킨 객체형식
    
    5) 객체관계형 DB : 기존 관계형DB, 객체형DB를 같이 쓰는 것. (Oracle)



3. DB 접속

    - show databases;
    - use db명
    - show tables; 
    - desc table명;                                                 description     (아마 시험?)



4. 실습준비

    - scott파일 실행
        접속 전 실행방법)
            해당파일이 있는 곳에서.
            mysql -u아이디 -p패스워드 < scott.sql    ##이파일을 가지고 실행해라
    
        접속 후 실행방법) 
            source 경로/파일명.sql    (우리가 db에서 백업한것은 db생성이 없기 때문에 만들어줘야한다.)
    
    - 백업 (sakila와 world)
        mysqldump -u아이디 -p패스워드 sakila > sakila.sql    #현재위치에 sakila.sql로 저장해라 




5. SQL(Structed Query Language)

    1)DDL(Data Definition Language)
        - CREATE
        - ALTER
        - DROP
    2)DML(Data Manipulation Language)
        - Insert
        - Update
        - Delete
    3)QL(Query Language)  조회하기 위한 언어 예전에는 DML에 포함되어 있었다.
        - Select
    4)DCL(Data Control Language)
        - GRANT
        - REVOKE


    *ANSI-SQL : 표준SQL


    필드(속성, 열)
    레코드(행, row, tuple) : 한줄, 데이터 갯수의 기준
    

6. SELECT
    1) 기본문법 
        SELECT 필드명, ... FROM 테이블명;
        
        필드의 가공처리
            SELECT ename, mgr, sal FROM emp;
            SELECT * FROM emp;
            SELECT ename, job, sal, sal+100 FROM emp;    <- 가공처리
        
        별명
            SELECT ename as bb FROM emp;
            또는
            SELECT ename bb FROM emp;
            또는
            SELECT ename as '직원이름' FROM emp;           ("") 금지


        중복제거 distinct
            SELECT distinct(ename)
            from emp
        
    2) 확장문법
    
        정렬기능 order by
        
            ASC, DESC        따로 안하면 자동으로 ASC

            - 여러개 정렬
            select ename, sal, deptno FROM emp ORDER BY deptno desc, sal asc;   
            부서번호는 역순, 급여는 부서기준으로 차례대로
        
        조건기능 - where, 문자열의 경우 패턴매칭 사용가능
        
            급여가 3000$ 이상인 직원의 사번, 이름, 업무, 급여 조회
                SELECT EMPNO,  ENAME, JOB, SAL 
                FROM EMP
                WHERE SAL >= 3000
            
            부서가 20이고 업무가 analyst인 직원의 이름, 부서, 업무, 급여 조회
                SELECT EMPNO, ENAME, JOB, SAL FROM EMP WHERE DEPTNO = 20 AND JOB = 'ANALYST';
            
            급여가 1500, 2500이하 받는 직원의 이름, 부서, 업무, 급여를 조회, 단 급여가 높은순    
                SELECT ENAME, DEPTNO, JOB, SAL FROM EMP WHERE SAL<=2500 AND SAL>=1500 ORDER BY SAL DESC;
            
            업무가 clerck, salesman, analyst 인 직원의 이름, 부서, 업무, 급여 조회
                SELECT ENAME, DEPTNO, JOB, SAL FROM EMP WHERE JOB = 'CLERCK' OR JOB = 'SALESMAN' OR JOB = 'ANALYST'
                또는
                SELECT ENAME, DEPTNO, JOB, SAL FROM EMP WHERE JOB in ('CLERCK', 'SALESMAN','ANALYST')
            
            1982년 1월 1일 이후에 입사한 직원의 이름 업무 입사일자 조회
                SELECT ENAME, JOB, HIREDATE FROM EMP WHERE HIREDATE > '1982-01-01';
            
            커미션이 없는 직원의 이름, 부서, 업무, 급여, 커미션 조회
                SELECT ENAME, DEPTNO, JOB, SAL, COMM FROM EMP WHERE COMM IS NULL;
        
        
            패턴매칭 like % : 0개이상 / _:1개     범위가 넓다는 단점이 있다. 
                beau% : beau, beaua, beuaaaaa
                beau_ : beaut, beaud, beauq
            
            이름이 s로 시작하는 직원의 이름, 업무, 급여 조회
                SELECT ENAME, JOB, SAL FROM EMP WHERE ENAME LIKE 'S%';


        그룹기능 : GROUP BY 필드명[, 필드명...] [HAVING ..조건문]
        
            급여평균(avg), 최저급여(min)
            select avg(sal), min(sal) from emp;
            
            부서별로 급여평균, 최저급여조회, 단 급여평균이 높은순으로 조회
            SELECT AVG(SAL) AS SAL_AVG, MIN(SAL) FROM EMP GROUP BY DEPTNO ORDER BY SAL_AVG;
       
    <연습문제>
    -------------------------------------------------------------
    1. 1981년에 입사한 사람의 이름, 업무, 입사일자 조회
        SELECT ENAME, JOB, HIREDATE FROM EMP WHERE HIREDATE >= '1981-01-01' AND HIREDATE < '1982-01-01';
    2. 사번이 7902, 7788, 7566인 사원의 이름, 업무, 급여, 입사일자 조회
        SELECT ENAME, JOB, SAL, HIREDATE FROM EMP WHERE EMPNO IN (7902,7788,7566);
    3. 업무가 manager, clerk, analyst가 아닌 직원의 이름, 업무, 급여, 부서번호, 조회
        SELECT ENAME, JOB, SAL, DEPTNO FROM EMP WHERE JOB NOT IN ('MANAGER', 'CLERK', 'ANALYST');
    4. 업무가 president 또는 salesman이고 급여가 1500인 직원의 이름, 급여, 업무, 부서번호 조회
        SELECT ENAME, SAL, JOB, DEPTNO FROM EMP WHERE JOB IN('PRESIDENT', 'SALESMAN') AND SAL = 1500;
    5. 가장 최근에 입사한 직원의 이름, 부서, 업무, 입사일자 조회
        SELECT ENAME, DEPTNO, JOB, MAX(HIREDATE) FROM EMP;
    6. 같은 부서내에서 같은 업무를 하는 직원의 급여가 많은 순으로 조회
        SELECT * FROM EMP ORDER BY DEPTNO ASC, SAL DESC, JOB ASC ;
    7. 이름에 L자가 2개 있고 30번 부서이거나 직속상사가 7782인 직원의 이름, 부서, 직속상사 조회
        SELECT ENAME, DEPTNO, MGR FROM EMP WHERE ENAME LIKE '%L%L%' AND DEPTNO = 30 OR MGR = 7782;
    8. 커미션이 급여보다 10% 이상 많은 직원의 급여가 많은 순으로 조회
        SELECT * FROM EMP WHERE COMM > (SAL*0.1) ORDER BY SAL DESC;
    -------------------------------------------------------------
    
    
    
7. 함수
    1) Single-Row Function (String, Numeric, Date & Time )
            -String Function
            ------------------------------------
                ASCII(), CHAR()
                -----------------
                SELECT ASCII('A'), CHAR(99)
                
                LENGTH()                                 -- 길이
                -----------------
                SELECT ENAME, LENGTH(ENAME) FROM EMP;
                
                INSTR()                                  -- 찾기
                -----------------
                SELECT INSTR('foobarbar', 'bar');
                
                LEFT(), RIGHT, SUBSTR(), SUBSTRING()     -- 문자열 추출
                ---------------------------------------
                SELECT LEFT('abcdefg', 3)
                SELECT SUBSTRING('I LOVE SQL', 3);        3부터 시작
                SELECT SUBSTRING('I LOVE SQL', 3, 4);     3부터 시작해서 4글자
                
                SELECT SUBSTR('I LOVE SQL', 3);  같음
                SELECT SUBSTR('I LOVE SQL', -3); 
                SELECT SUBSTR('I LOVE SQL', -8, 3);
                
                
                LOWER(), UPPER()
                ------------------
                SELECT LOWER('ABcDE'), UPPER('ABcDE')
                
                LTRIM(), RTRIM(), TRIM()
                ---------------------------
                SELECT '      ABC      ';
                SELECT LTRIM('      ABC      ') AS LTR
                SELECT RTRIM('      ABC      ') AS RTR
                SELECT TRIM('      ABC      ') AS TR
                
                
            -Numeric Function
            -------------------------
                CEIL(), FLOOR(), ROUND(), TRUNCATE()    -반올림, 버림
                -----------------------------------------------------
                SELECT CEIL(1.23), FLOOR(1.78);         -자리수 지정을 못하는 반올림, FLOOR는 무조건 정수처리
                SELECT ROUND(1.23, 0), ROUND(1.78, 1);  -자리수 가능한 반올림
                SELECT TRUNCATE(1.78, 1);               -자리수 가능한 버림
                
                MOD()             --나머지
                -------------
                SELECT MOD(29, 9), 29%9;
                
                RAND()      --난수
                --------------
                SELECT RAND();
                /* 7<= R < 12 : FLOOR(i+RAND() * (j-i)) */   범위 난수 발생 만들기
                SELECT FLOOR(7+(RAND() * 5));
            
            
            -Date & Time
            ---------------------------
                NOW(), SYSDATE(), CURDATE(), CURTIME()
                ---------------------------------------
                SELECT NOW();           - MYSQL전용
                SELECT SYSDATE();
                SELECT CURDATE();
                SELECT CURTIME();
                
                YEAR(), MONTH(), DAYOFMONTH()
                ----------------------------------
                SELECT YEAR(NOW()), YEAR('2019-12-24');
                SELECT MONTH(NOW()), MONTH('2019-12-24');
                SELECT DAYOFMONTH(NOW());
                
                DAYOFWEEK(), WEEKDAY()     1-일요일, 0-월요일
                -----------------------
                SELECT DAYOFWEEK(NOW()), WEEKDAY(NOW());
                
                DAYOFYEAR()   365일중 몇번째인지 계산
                -----------
                SELECT DAYOFYEAR(NOW());
                
                DATE_ADD(), DATE_SUB(), ADDDATE(), DATADIFF(), LAST_DAY()
                ----------------------------------------------
                SELECT DATE_ADD(NOW(), INTERVAL 5 DAY);         -옵션은 INTERVAL 숫자 (YEAR, MONTH)
                
                SELECT DATEDIFF('2020-04-18', NOW());     - 날짜의 차이 출력
                SELECT LAST_DAY('2017-11-19');            - 해당 달의 마지막 날 출력
                
                
                
                
    2) Aggregation Function : AVG(), SUM(), COUNT(), MAX(), MIN()
        - 업무가 SALESMAN인 직원들의 급여 평균, 최고액, 최저액, 합계
        --------------------------------------------------------
        SELECT AVG(SAL), MAX(SAL), MIN(SAL), SUM(SAL) FROM EMP WHERE JOB = 'SALESMAN';
        
        - 총직원수
        SELECT COUNT(*) FROM EMP;
        SELECT COUNT(COMM) FROM EMP;       -NULL은 값에 포함 안됨
        SELECT SUM(SAL)/COUNT(COMM) FROM EMP;
    
    
            
    3) 그 외 기타함수
            -CONVERT()      데이터 타입을 바꿈
            ------------
                SELECT CONVERT('2019-12-24', DATE);
                SELECT CONVERT(150, CHAR); 
            
            -CASE 다중조건
            ---------------
                - 업무가 SALESMAN이면 '커미션 있음' 이라고 하고 그 외 업무는 '커미션 없음'이라고 조회
                ------------------------------------------------------------------------------
                SELECT ENAME, 
                       JOB, 
                       COMM,
                       CASE WHEN JOB = 'SALESMAN' THEN '커미션있음'
                            ELSE '커미션 없음'
                       END AS GG
                FROM EMP;
            
            
            -COALESCE()   
            -------------
                - 현재직원들의 총 급여를 조회
                ----------------------------
                SELECT ENAME, SAL, COMM, (SAL + COMM) AS '총급여' FROM EMP;     -- NULL 계산은 무조건 NULL
                SELECT ENAME, SAL, COMM, (SAL + COALESCE(COMM, 0)) AS '총급여' FROM EMP;  -- COALESCE는 NULL이면 바꿀 숫자
                
                
            ---예제 함수
            1. 오늘부터 12월 25일까지 몇일이 남았는가?
                SELECT DATEDIFF('2019-12-25', NOW());

            timestampdiff()
            2. 현재까지 근무한 직원들의 근무일수를 몇주 몇일로 조회.(단, 근무일수가 많은 사람 순으로 조회)
                SELECT ENAME
                      ,TIMESTAMPDIFF(WEEK, HIREDATE, NOW()) AS WORKWEEK
                      ,(TIMESTAMPDIFF(DAY, HIREDATE, NOW())-(TIMESTAMPDIFF(WEEK, HIREDATE, NOW())*7)) AS WORKDAY
                FROM EMP
                ORDER BY WORKWEEK DESC, WORKDAY DESC; 

            3. 10번 부서 직원들 중 현재까지의 근무월수를 계산해서 조회 (PERIOD_DIFF, TIMESTAMPDIFF())
                SELECT ENAME, HIREDATE, TIMESTAMPDIFF(MONTH, HIREDATE, NOW()) AS '근무월수' FROM EMP WHERE DEPTNO = 10;

            4. 20번 부서 직원들 중 입사일자로부터 13개월이 지난 후의 날짜를 조회 
                SELECT ENAME, DATE_ADD(HIREDATE, INTERVAL 13 MONTH) AS AFTER13 FROM EMP WHERE DEPTNO = 20;

            5. 모든 직원에 대해 입사한 달의 근무일수를 조회 
                SELECT ENAME, HIREDATE, DATEDIFF(LAST_DAY(HIREDATE), HIREDATE) AS '해당달 근무일' FROM EMP; 

            6. 현재 급여에 15%가 증가된 급여를 계산하여 사번,이름, 급여, 증가된 급여를 조회(단, 급여는 반올림하여 적용한다.)
                SELECT EMPNO, ENAME, SAL, ROUND(SAL*1.15) AS '증가된 급여' FROM EMP;
                
            7. 이름, 입사일, 입사일로부터 현재까지의 월수, 급여,급여 총계를 조회
                SELECT TIMESTAMPDIFF(MONTH, HIREDATE, NOW()) AS '현재까지월수'
                    ,SAL 
                    ,(SAL+COALESCE(COMM, 0)) AS '급여총계 '
                FROM EMP;

            8. 업무가 analyst이면 급여를 10%증가시키고 clerk이면 15%, manager이면 20%증가 시켜서 
            이름, 업무, 급여, 증가된 급여를 조회 
                SELECT ENAME, JOB, SAL, CASE WHEN JOB = 'ANALYST' THEN ROUND(SAL*1.1)
                                             WHEN JOB = 'CLERK' THEN ROUND(SAL*1.15)
                                             WHEN JOB = 'MANAGER' THEN ROUND(SAL*1.2)
                                             ELSE SAL
                                        END AS '증가된 급여'
                FROM EMP;

            9. 이름의 첫글자가 k보다 크고 y보다 작은 직원의 이름, 부서, 업무를 조회하시오.
                SELECT ENAME, DEPTNO, JOB 
                FROM EMP 
                WHERE SUBSTR(ENAME, 1, 1) > 'k' 
                  AND SUBSTR(ENAME, 1, 1) < 'y';
            
8. DML : INSERT, UPDATE, DELETE

    CREATE TABLE TBLTEST(
        ID VARCHAR(10) NULL,
        NAME VARCHAR(10) NULL,
        REGDATE DATETIME NULL
    ) DEFAULT CHARACTER SET euckr;
        
    1) INSERT
        INSERT INTO 테이블(필드명, ...) VALUES (값....)
        INSERT INTO 테이블 | VALUES(값,...)
        ----------------------------------------------
        INSERT INTO TBLTEST(ID, NAME, REGDATE) VALUES('1', '홍길동', NOW());
        INSERT INTO TBLTEST(ID, NAME) VALUES('2', '임꺽정');
        INSERT INTO TBLTEST VALUES('3', '홍경래', '2019-12-24');
            
            
    2) UPDATE
        UPDATE 테이블명
        SET 필드명 = 값
        WHERE 조건식
        ----------------------
        UPDATE TBLTEST
        SET NAME = '임경업', REGDATE=NOW()
        WHERE ID = '2';
            
        * WORKBENCH는 이 기능을 안정성으로 막고 있기 때문에 수정해주어야한다.
        EDIT -> PREFERENCES -> SQL Editor -> 맨 밑에 safe update 부분 체크 해제 -> 접속해제후 재접속 하면 된다.
        
     3) DELETE
         DELETE FROM 테이블명 WHERE 조건식;
         ----------------------------------
         DELETE 
         FROM TBLTEST
         WHERE ID = '1'
        
   
9. SubQuery
    특징
    1) 다른 쿼리문에 포함된 쿼리
    2) 반드시 ()를 사용해야 한다.
    3) ORDER BY 를 사용할 수 없다.
    4) 연산자
        1) 단일행 연산자
        2) 다중행 연산자 : IN, ANY, ALL
        3) 다중열 비교 :
    5) 상관 서브 쿼리
    ----------------------------
            --scott의 급여보다 더 많이 받는 직원의 이름, 업무, 급여를 조회

            SELECT ENAME, JOB, SAL 
            FROM EMP 
            WHERE SAL > (SELECT SAL FROM EMP WHERE ENAME = 'SCOTT');


            -사번이 7521의 업무와 같고, 급여가 7934보다 많은 직원의 사번, 이름, 업무, 급여를 조회

                SELECT EMPNO, ENAME, JOB, SAL 
                FROM EMP 
                WHERE JOB = (SELECT JOB FROM EMP WHERE EMPNO = '7521')
                  AND SAL > (SELECT SAL FROM EMP WHERE EMPNO = '7521');

            - 가장 최근에 입사한 직원의 이름, 부서, 업무, 입사일자 조회
                SELECT ENAME, DEPTNO, JOB, HIREDATE
                FROM EMP
                WHERE HIREDATE = (SELECT MAX(HIREDATE) FROM EMP);


            - 업무별 최소급여를 받는 직원의 사번, 이름, 부서코드, 급여를 조회
                SELECT EMPNO, ENAME, DEPTNO, SAL ,JOB
                FROM EMP 
                WHERE SAL IN (SELECT MIN(SAL) FROM EMP GROUP BY JOB)
                ORDER BY JOB ASC;


            - 업무별 최소급여보다 많이 받는 직원의 사번, 이름, 부서코드, 급여조회
            ---------------------------------------------------------------
            SELECT EMPNO, ENAME, DEPTNO, SAL 
            FROM EMP
            WHERE SAL > ANY(SELECT MIN(SAL) 
                         FROM EMP
                         GROUP BY JOB)


            - 업무별 최대급여 이상 받는 직원의 사번, 이름, 부서코드, 급여조회
            --------------------------------------------------------------
            SELECT EMPNO, ENAME, DEPTNO, SAL, JOB
            FROM EMP
            WHERE SAL >= ALL(SELECT MAX(SAL)
                         FROM EMP
                         GROUP BY JOB);
        
        --다중열 비교
        ------------
            SELECT SAL, COMM FROM EMP WHERE ENAME = 'MILLER';
                UPDATE EMP
                SET SAL = 1500, COMM = 30
                WHERE ENAME = 'MILLER';  데이터를 변경하고 실행
            
            급여와 커미션이 30번 부서에 있는 직원의 급여와 커미션이 같은 직원에 대해 사번, 이름, 부서번호, 급여, 커미션을 조회
            SELECT EMPNO, ENAME, DEPTNO, SAL, COMM
            FROM EMP
            WHERE (SAL, COMM) IN (SELECT SAL, COMM FROM EMP WHERE DEPTNO = 30);
        
        --기타 서브 쿼리
        ---------------
            SELECT * FROM EMP WHERE DEPTNO = 30;
            SELECT * FROM (SELECT * FROM EMP WHERE DEPTNO = 30)

            INSERT INTO TBLTEST(ID, NAME) SELECT EMPNO, ENAME FROM EMP;
        

        -- 상관 서브쿼리
        ------------------
            --적어도 한명의 직원으로부터 보고를 받을 수 있는 직원의 이름, 업무, 입사일자, 급여 조회
            ---------------------------------------------------------------------------------
              SELECT ENAME, JOB, HIREDATE, SAL
              FROM EMP AS T1
              WHERE EXISTS(SELECT * FROM EMP AS T2
                           WHERE T1.EMPNO = T2.MGR);
        
        
        예제
        -----
        1. Blake와 같은 부서에 있는 모든 직원의 사번, 이름, 입사일자 조회
            SELECT EMPNO, ENAME, HIREDATE 
            FROM EMP 
            WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = 'BLAKE');
            
        2. SELECT empno, ename, deptno, sal, comm FROM emp
        WHERE (sal, comm) IN(SELECT sal, comm FROM emp WHERE deptno=30);
        이 쿼리에서 보너스가 null인 사람도 출력될 수 있도록 수정하시오.
            SELECT EMPNO, ENAME, DEPTNO, SAL, COMM
            FROM EMP
            WHERE (SAL, COMM) IN (SELECT SAL, COALESCE(COMM, NULL) FROM EMP WHERE DEPTNO = 30);

        3. 평균 급여 이상을 받는 직원들의  사번, 이름을 조회. 단, 급여가 많은 순으로 정렬
            SELECT EMPNO, ENAME
            FROM EMP
            WHERE SAL >= ANY(SELECT AVG(SAL) FROM EMP)
            ORDER BY SAL DESC;
            
        4. 이름에 T자가 들어가는 직원이 근무하는 부서에서 근무하는 직원의 사번,이름, 급여 조회
            SELECT EMPNO, ENAME, SAL
            FROM EMP
            WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME LIKE 'T%');
            
        5. 부서의 위치가 dallas인 모든 직원에 대해 사번, 이름, 급여, 업무조회
            SELECT A.EMPNO, A.ENAME, A.SAL, A.JOB
            FROM EMP A
            WHERE A.DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC = 'DALLAS');
            
        6. King에게 보고하는 모든 직원의 이름과 부서, 업무, 급여를 조회
            SELECT ENAME, DEPTNO, JOB, SAL
            FROM EMP
            WHERE MGR = (SELECT EMPNO FROM EMP WHERE ENAME = 'KING');
            
            
        7. 급여가 30번 부서의 최저급여보다 높은 직원의 사번, 이름, 급여 조회
            SELECT EMPNO, ENAME, SAL
            FROM EMP
            WHERE SAL > ANY(SELECT MIN(SAL) FROM EMP WHERE DEPTNO = 30);
            
        8. 10번부서에서 30번 부서의 직원과 같은 업무를 하는 직원의 이름과 업무를 조회
            SELECT ENAME, JOB
            FROM EMP
            WHERE JOB = ANY(SELECT JOB FROM EMP WHERE DEPTNO = 30)
              AND DEPTNO = 10;
            
        9. 말단 사원의 사번, 이름, 업무, 부서번호, 급여, 입사일자를 조회하시오
            SELECT EMPNO, ENAME, JOB, DEPTNO, SAL, HIREDATE
            FROM EMP A
            WHERE EXISTS(SELECT * FROM EMP B WHERE B.MGR = A.EMPNO);


10. JOIN 
    1) 여러 개의 테이블을 병합하여 하나의 결과를 도출하기 위한 방법
    2) 종류
        1) Cartesian Product Join(데카르트 곱)
        2) Equi Join
            - 공통 필드의 레코드를 가져오는 방법(중복)
            - INNER JOIN (중복제거)
        3) OUTER JOIN
            -INNER JOIN의 확장
                INNER JOIN + 공통되지 않은 레코드도 추출
            -종류
                LEFT OUTER JOIN
                RIGHT OUTER JOIN
                FULL OUTER JOIN
        4) Non Equi Join
            -공통되지 않는 필드의 레코드를 가져오는 방법
        5) SELF JOIN    
        ---------------------------------------------------
        TESTDB에 테이블 생성
        ------------------
        CREATE TABLE TBLA(
            ID INT,
            VALUE INT
        );
        
        CREATE TABLE TBLB(
            ID INT,
            VALUE INT
        );
        
        insert into tbla values(1, 10);
        insert into tbla values(2, 20);
        insert into tbla values(3, 30);
        insert into tbla values(5, 50);
        insert into tbla values(7, 70);
        
        insert into tblb values(1, 10);
        insert into tblb values(2, 20);
        insert into tblb values(4, 40);
        insert into tblb values(5, 50);
        insert into tblb values(8, 80);
        
        
        --INNER JOIN
        --------------
            SELECT A.ID, A.VALUE FROM TBLA A INNER JOIN TBLB B ON A.ID = B.ID; (조건문은 ON)
            SELECT A.ID, A.VALUE FROM TBLA A JOIN TBLB B ON A.ID = B.ID;       (그냥 join으로 쓰면 inner join으로 인식)


             --비표준 INNER JOIN
             SELECT A.ID, A.VALUE FROM TBLA A ,TBLB B WHERE A.ID = B.ID; (JOIN 대신 ,    ON대신 WHERE)

             SELECT TBLA.ID, TBLB.VALUE FROM TBLA, TBLB;   (이건 중복이 없이 모든걸 조인한다)


            --직원의 사번, 이름, 업무, 부서번호, 부서명을 조회
            -----------------------------------------------
            SELECT A.EMPNO, A.ENAME, A.JOB, A.DEPTNO, B.DNAME
            FROM EMP A, DEPT B
            WHERE A.DEPTNO = B.DEPTNO;


            --SALESMAN의 업무를 수행하는 직원의 사번, 이름, 업무, 부서번호, 부서명 조회
            ----------------------------------------------------------------------
            SELECT A.EMPNO, A.ENAME, A.JOB,  A.DEPTNO, B.DNAME
            FROM EMP A, DEPT B
            WHERE A.DEPTNO = B.DEPTNO
              AND A.JOB = 'SALESMAN';

              또는  (순서차이가 있다. 위는 조인할때 필터링, 밑은 조인이 끝나고 난뒤 조건 처리)

            SELECT A.EMPNO, A.ENAME, A.JOB,  A.DEPTNO, B.DNAME
            FROM EMP A INNER JOIN DEPT B
            ON A.DEPTNO = B.DEPTNO
            WHERE A.JOB = 'SALESMAN';


            --NEWYORK에서 근무하는 직원의 사번, 이름, 업무, 부서명 조회
            --------------------------------------------------------
            SELECT A.EMPNO, A.ENAME, A.JOB, B.DNAME
            FROM EMP A, DEPT B
            WHERE A.DEPTNO = B.DEPTNO
              AND B.LOC = 'NEW YORK';
              
              
              
        -OUTER JOIN (INNER JOIN을 기본적으로 포함하면서 확장된 방식)
            - INNER JOIN의 확장
                INNER JOIN + 공통되지 않은 레코드도 추출
            - 종류
                - LEFT OUTER JOIN  (왼쪽을 다 가져오기)
                - RIGHT OUTER JOIN (오른쪽을 다 가져오기)
                - FULL OUTER JOIN  (양쪽 다 가져오기)
                
                
            SELECT A.ID, A.VALUE, B.ID, B.VALUE FROM TBLA A LEFT OUTER JOIN TBLB B ON A.ID = B.ID;
            SELECT A.ID, A.VALUE, B.ID, B.VALUE FROM TBLA A RIGHT OUTER JOIN TBLB B ON A.ID = B.ID;
            SELECT A.ID, A.VALUE, B.ID, B.VALUE FROM TBLA A FULL OUTER JOIN TBLB B ON A.ID = B.ID;
          
            --직원들의 이름, 급여, 부서명, 근무지를 조회(단, 부서명과 근무지는 모두 출력할 수 잇도록 한다.)
            SELECT A.ENAME, A.SAL, B.DNAME, B.LOC
            FROM EMP A RIGHT OUTER JOIN DEPT B
            ON A.DEPTNO = B.DEPTNO;
            
        - Non Equi Join
            --직원의 사번, 이름, 업무, 급여, 급여등급을 조회
            ---------------------------------------------
            SELECT EMPNO, ENAME, JOB, SAL, GRADE
            FROM EMP INNER JOIN SALGRADE
              ON EMP.SAL >= SALGRADE.LOSAL AND EMP.SAL <= SALGRADE.HISAL;
            
            
         - SELF JOIN
             --직원의 사번, 이름, 업무, 관리자, 관리자 이름을 조회
             ------------------------------------------------
             SELECT A.EMPNO, A.ENAME, A.JOB, A.MGR, B.ENAME
             FROM EMP A LEFT OUTER JOIN (SELECT ENAME, EMPNO FROM EMP) B
             ON A.MGR = B.EMPNO;
             
             CREATE TABLE TBLC (
                 ID INT,
                 VALUE INT
             );
             
             INSERT INTO TBLC VALUES(1, 10);
             INSERT INTO TBLC VALUES(2, 20);
             INSERT INTO TBLC VALUES(7, 70);
             INSERT INTO TBLC VALUES(8, 80);
             INSERT INTO TBLC VALUES(9, 90);
             
             
          - 3개의 데어터 조인
             -----------------------------------
             SELECT TBLA.ID, TBLA.VALUE
             FROM TBLA JOIN TBLB 
              ON TBLA.ID = TBLB.ID
             JOIN TBLC
              ON TBLB.ID = TBLC.ID;
              
              
          예제
          1. 커미션을 받는 직원에 대해 이름, 부서명, 근무지 조회
              SELECT A.ENAME, B.DNAME, B.LOC
              FROM EMP A , DEPT B
              WHERE A.DEPTNO = B.DEPTNO
                AND A.COMM IS NOT NULL;
                
          2. 이름 중간에 L자가 있는 직원의 이름, 업무, 부서명, 근무지 조회
              SELECT A.ENAME, A.JOB, B.DNAME, B.LOC
              FROM EMP A LEFT JOIN DEPT B
                ON A.DEPTNO = B.DEPTNO
               AND A.ENAME LIKE '%L%';
               
          3. 각 직원들에 대해 그들의 관리자 보다 먼저 입사한 직원의 이름, 입사일, 관리자 이름, 관리자 입사일 조회
              SELECT A.ENAME, A.HIREDATE, B.ENAME AS 'MGR_NAME' , B.HIREDATE AS 'MGR_HIRE'
              FROM EMP A, (SELECT EMPNO, MGR, ENAME, HIREDATE FROM EMP) B
              WHERE A.MGR = B.EMPNO
                AND A.HIREDATE < B.HIREDATE;
                
          
          4. 테이블 생성
            CREATE TABLE tblBook(
                author varchar(20),
                title varchar(20)
            ) default character set utf8;

            INSERT INTO tblBook VALUES('최주현', '하늘과 땅');
            INSERT INTO tblBook VALUES('최주현', '바다');
            INSERT INTO tblBook VALUES('유은정', '바다');
            INSERT INTO tblBook VALUES('박성우', '문');
            INSERT INTO tblBook VALUES('최주현', '문');
            INSERT INTO tblBook VALUES('박성우', '천국');
            INSERT INTO tblBook VALUES('최지은', '천국');
            INSERT INTO tblBook VALUES('최주현', '천국');
            INSERT INTO tblBook VALUES('박성우', '고슴도치');
            INSERT INTO tblBook VALUES('서금동', '나');
              
          4-1. 같은 책인데 다른 작가가 있다. 한권에 책에 대해 두 명 이상의 작가가 쓴 책을 조회
                 책이름, 작가명, 작가명
                 SELECT A.TITLE, A.AUTHOR, B.AUTHOR
                 FROM tblbook A INNER JOIN TBLBOOK B
                   ON A.TITLE = B.TITLE
                  AND A.author != B.AUTHOR
                 GROUP BY TITLE;
                 
                 
                 
                 select b1.title, b1.author, b2.author
                 from tblbook b1 inner join tblbook b2
                 on b1.title = b2.title and b1.author > b2.author;
                 
          4-2. 한권에 책에 대해 세명의 작가가 쓴 책을 조회
                 책이름, 작가명, 작가명, 작가명
                  SELECT A.TITLE, A.AUTHOR, B.AUTHOR, C.AUTHOR
                  FROM TBLBOOK A INNER JOIN TBLBOOK B
                    ON A.TITLE = B.TITLE
                   AND A.AUTHOR != B.AUTHOR
                   JOIN TBLBOOK C
                     ON A.TITLE = C.TITLE
                    AND A.AUTHOR != C.AUTHOR
                    AND B.AUTHOR != C.AUTHOR
                   GROUP BY A.TITLE;
                  
              
11. 데이터 무결성(Data Integrity)
    1) What?, How?
        1)실체(Entity) 무결성 : 중복된 데이터를 방지
            - Primary Key, Unique 제약, Constraint)
        2)영역(Domain) 무결성 : 범위
            - Check(mysql에서는 지원안됨)
        3)참조(Reference) 무결성 : 참조
            부모테이블 : 참조당하는 테이블
            자식테이블 : 참조하는 테이블
                -Foreign Key
                
    2) 컬럼의 속성
        1) NN(Not Null) 속성 
            primary Key, not null
        2) ND(Not Duplicate) 속성
            primary Key, Unique
            
        3) NC(No Change) 속성
            Foreign Key
    
    3) Primary Key(기본키)
        - NN속성과 ND속성을 지원
        - 한테이블에 한개만 사용 가능
      ----------------------------------------------
              CREATE TABLE TBLEXAM(
                  ID INT,
                  NAME VARCHAR(10)
              ) DEFAULT CHARACTER SET UTF8;
          
          --PRIMARY KEY
          -------------------
              INSERT INTO TBLEXAM(ID, NAME) VALUES(1, 'HONG');
                  1) 테이블 생성 시 
                  2) 생성 후 ALTER TABLE TBLEXAM ADD CONSTRAINT PK_ID PRIMARY KEY(id);
                  delete from tblexam;
          
          --ND속성 테스트
          --------------
              INSERT INTO TBLEXAM(ID, NAME) VALUES(1, 'HONG');
              INSERT INTO TBLEXAM(ID, NAME) VALUES(1, 'HONG');

          -- NN속성 테스트
          --------------
              INSERT INTO TBLEXAM(NAME) VALUES('KIM');

              DROP TABLE TBLEXAM;

              --CREATE를 이용한 기본키 장착
              CREATE TABLE TBLEXAM(
                  ID INT PRIMARY KEY,
                  NAME VARCHAR(10)
              ) DEFAULT CHARACTER SET UTF8;

              DROP TABLE TBLEXAM;

              CREATE TABLE TBLEXAM(
                  ID INT,
                  NAME VARCHAR(10),
                  CONSTRAINT PK_ID PRIMARY KEY(ID, NAME)
              );

    *) DD(Data Dictionary)
          show databases;
          show tables;
          show processlist;
          
          desc information_schema.table_constraints;
          SELECT TABLE_NAME, CONSTRAINT_NAME, SONSTRAINT_TYPE FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;
          
          --제약삭제
          ALTER TABLE TBLEXAM DROP PRIMARY KEY;
          
          --컬럼수정
          ALTER TABLE TBLEXAM MODIFY NAME VARCHAR(20) NOT NULL;
          desc tblexam;
          
          ALTER TABLE TBLEXAM ADD AGE INT;
          DESC TBLEXAM;
          
      -Unique
          DROP TABLE TBLEXAM;
          
          CREATE TABLE TBLEXAM(
              ID INT NOT NULL,
              NAME VARCHAR(10),
              AGE INT,
              CONTRAINT UK_NAME UNIQUE(NAME)
          );
          
          
          --ND속성 테스트
          INSERT INTO TBLEXAM(ID, NAME) VALUES(1, 'HONG');
          INSERT INTO TBLEXAM(ID, NAME) VALUES(2, 'HONG');
          
          --NN속성 테스트
          INSERT INTO TBLEXAM(ID) VALUES(1);
          
          --AGE필드를 UNIQUE로 추가
          ALTER TABLE TBLEXAM ADD CONSTRAINT UK_AGE UNIQUE(AGE);
          
          SELECT TABLE_NAME, CONTRAINT_NAME, CONTRAINT_TYPE FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;
          
  /* ----------------
      예방하는 방법
      1. NN : DEFAULT    
      2. ND :     
  
  */-----------------
      DROP TABLE TBLEXAM;
      
      CREATE TABLE TBLEXAM (
          ID INT NOT NULL auto_invrement primary key,
          NAME VARCHAR(10) default 'no name',
          AGE INT default 0
      );
      
      INSERT INTO TBLEXAM(NAME, AGE) VALUES('HONG', 20);
      INSERT INTO TBLEXAM(NAME) VALUES('KIM');
      INSERT INTO TBLEXAM(AGE) VALUES(30);
      
      
      
      --FOREIGN KEY
      
      CREATE TABLE TBLDEPT(
          DEPTNO INT,
          DNAME VARCHAR(12)
      );
      
      
      INSERT INTO TBLDEPT VALUES(1000, 'SALES');
      INSERT INTO TBLDEPT VALUES(2000, 'RESEARCH');
      
      CREATE TABLE TBLEMP(
          EMPNO INT,
          ENAME VARCHAR(10),
          HIREDATE DATETIME,
          DEPTNO INT
      );
      
      INSERT INTO TBLEMP(EMPNO, ENAME, HIREDATE, DEPTNO) VALUES(1, 'HONG', NOW(), 3000);
      
      ALTER TABLE TBLDEPT ADD CONSTRAINT PK_DEPTNO PRIMARY KEY(DEPTNO);
      ALTER TABLE TBLEMP ADD CONSTRAINT FK_DEPTNO FOREIGN KEY(DEPTNO) REFERENCES TBLDEPT(DEPTNO);
      
          --nc속성 테스트
          ---------------
              INSERT INTO TBLEMP(EMPNO, ENAME, HIREDATE, DEPTNO) VALUES(1, 'HONG',NOW(), 2000);
              
              UPDATE TBLDEPT
              SET DEPTNO = 2001
              WHERE DEPTNO = 2000;
              
              UPDATE TBLDEPT
              SET DEPTNO = 1001
              WHERE DEPTNO = 1000;  #이것은 실행이 된다. 아무도 참조 안하고 있기 때문에
      
      
       예제 주어진 자료를 가지고 테이블 생성하기
       
       CREATE TABLE POST (
           POST1 CHAR(3),
           POST2 CHAR(3),
           ADDR VARCHAR(60) NOT NULL
       );
      
      CREATE TABLE MEMBER (
          ID NUM(4),
          NAME VARCHAR(10) NOT NULL,
          SEX CHAR(1),
          JUMIN1 CHAR(6),
          JUMIN2 CHAR(7),
          TEL VARCHAR(15),          
          POST1 CHAR(3),
          POST2 CHAR(3),
          ADDR VARCHAR(60)
       );
      
      
      
12. VIEW : 가상테이블
    1) 정의 : 실제 테이블을 여러 관점에서 투영한 가상 테이블
    2) 이유
        1) 사용자에게 편리한 접근을 허용
        2) 컬럼단위의 보안 설정이 가능
        
    3) 문법
        CREATE VIEW 뷰이름
        AS
        SELECT문
        
        -----------------------------
        CREATE VIEW VW_TEST
        AS
        SELECT EMPNO, ENAME, SAL, COMM, DNAME
        FROM EMP INNER JOIN DEPT
        ON EMP.DEPTNO = DEPT.DEPTNO
        WHERE SAL >= 1500;
    

    4) 주의점 : DML작업(INSERT, UPDATE, DELETE)
    
13. INDEX(인덱스) : 이진탐색기법사용
        장점 : 빠르게 처리할 수 있음
        단점 : 공간낭비
        
    1) 문법 
        - CREATE INDEX 인덱스명 ON 테이블명(필드명...)
            또는
        - 제약을 통해서 자동 생성
        ---------------------------------
        CREATE TABLE TBLINDEX(
            ID INT,
            NAME VARCHAR(10),
            POINT FLOAT            
        );
        
        INSERT INTO TBLINDEX VALUES(5, 'SCOTT', 9.8);
        INSERT INTO TBLINDEX VALUES(2, 'ADAM', 4.2);
        INSERT INTO TBLINDEX VALUES(7, 'JOHN', 6.7);
        INSERT INTO TBLINDEX VALUES(1, 'TOM', 5);


        EXPLAIN SELECT * FROM TBLINDEX WHERE POINT >= 4;


        CREATE INDEX IDX_POINT ON TBLINDEX(POINT);
        
        ALTER TABLE TBLINDEX ADD CONSTRAINT PK_ID PRIMARY KEY(ID);
    

14. Transaction 
    - 작업단위 
    - 'All or Nothing' 트랜잭션의 대표적인 문구  (아예 다 하던지 중간만할거면 시작도 하지 말던지)
    - SHOW VARIABLES LIKE 'DATADIR';  로그 디렉토리 확인
    - 대표적인 명령어
        ROLLBACK
        COMMIT
        
        SELECT @@AUTOCOMMIT;  COMMIT상태
        SET @@AUTOCOMMIT = FALSE;     AUTOCOMMIT OFF  (이걸 OFF하면 실시간으로 COMMIT이 안되고 프로그램 종료시 COMMIT된다)
        
        이렇게 하면 CHECKPOINT로 ROLLBACK위치를 저장 할 수 있음.
        
        @@ <- 전역변수 
        
    - 로그파일에는 DML작업만 기록
    - 동기화 작업을 수행    (동시작업문제 해결을 위함은 하나씩 작업하는 것이 동기화,  단 시간이 오래걸림)
        COMMIT하기전 (내가 작업완료하기전) 남들에게는 변경 되지 않는다.
    - 특성(ACID)  
        - Atomic(원자성)
        - C 일관성
        - I 고립성
        - D 지속성
    
15. DB 설계(모델링)  ppt 자료 참고
    - 정규화
    --------
        제 1정규화 : 속성값은 반드시 원자값이여야 한다.
        제 2정규화 : 모든 키가 아닌 컬럼은 기본키 전체에 의존적이어야 한다.
                    기본키 일부분에 의존적이어서는 안된다.
        제 3정규화 : 키가 아닌 컬럼은 다른 키가 아닌 컬럼에 의존적이어서는 안된다.
        
        
    - 모델링 이유 : 데이터의 중복성 제거
        
        글로 되있다면,
            명사를 뽑기 
            동사를 뽑기, 형용사 뽑기  연결
    
























cmd  mysql 접속



    입력 :
        show databases;  ##데이터베이스 목록
    결과 :
        +--------------------+
        | Database           |
        +--------------------+
        | information_schema |
        | mysql              |
        | performance_schema |
        | sakila             |
        | sys                |
        | world              |
        +--------------------+
        6 rows in set (0.00 sec)

    information_schema, mysql, performance_schema  sys는 시스템 db이므로 건들지 않도록 한다.
    
    sakila, world는 샘플DB이므로 마음껏 사용해도 된다.
    
    ---------------------------------
    
    입력 : 
        use world;       ## 데이터베이스로 들어가기
    결과 :
        Database changed
    

    ---------------------------------
    
    입력 :
        show tables;
    결과 :    
        +-----------------+
        | Tables_in_world |
        +-----------------+
        | city            |
        | country         |
        | countrylanguage |
        +-----------------+
        3 rows in set (0.00 sec)
    
    ---------------------------------

    입력 :
        desc city     ##해당 테이블 정보       
    결과 :
        +-------------+----------+------+-----+---------+----------------+
        | Field       | Type     | Null | Key | Default | Extra          |
        +-------------+----------+------+-----+---------+----------------+
        | ID          | int(11)  | NO   | PRI | NULL    | auto_increment |
        | Name        | char(35) | NO   |     |         |                |
        | CountryCode | char(3)  | NO   | MUL |         |                |
        | District    | char(20) | NO   |     |         |                |
        | Population  | int(11)  | NO   |     | 0       |                |
        +-------------+----------+------+-----+---------+----------------+
        5 rows in set (0.01 sec)
    ---------------------------------
    
    입력 :
        CREATE DATABASE DBTEST;
    결과 :
        Query OK, 1 row affected (0.00 sec)
        
    ---------------------------------
     
    입력 :
        DROP DATABASE DBTEST;
    결과 :
        Query OK, 0 rows affected (0.03 sec)
        
     ---------------------------------   
     
 백업파일 복구
     
     입력 : 
         create database world;       - 불러올 DB명을 미리 생성해주어야 한다.
     결과 :
         Query OK, 1 row affected (0.00 sec)
         
         
     입력 :
         use world;          - 반드시 해당 데이터베이스로 변경해 주어야 한다.
         source world.sql    - 파일이 있는곳에서 실행한게 아니라면 경로를 적어줘야함.
         
     
 인코딩 방식 (UTF-8)
 
     입력 :
         SHOW VARIABLES LIKE 'C%';
     결과 :
         +--------------------------+---------------------------------------------------------+
        | Variable_name            | Value                                                   |
        +--------------------------+---------------------------------------------------------+
        | character_set_client     | euckr                                                   |
        | character_set_connection | euckr                                                   |
        | character_set_database   | latin1                                                  |
        | character_set_filesystem | binary                                                  |
        | character_set_results    | euckr                                                   |
        | character_set_server     | latin1                                                  |
        | character_set_system     | utf8                                                    |
        | character_sets_dir       | C:\Program Files\MySQL\MySQL Server 5.7\share\charsets\ |
        | check_proxy_users        | OFF                                                     |
        | collation_connection     | euckr_korean_ci                                         |
        | collation_database       | latin1_swedish_ci                                       |
        | collation_server         | latin1_swedish_ci                                       |
        | completion_type          | NO_CHAIN                                                |
        | concurrent_insert        | AUTO                                                    |
        | connect_timeout          | 10                                                      |
        | core_file                | OFF                                                     |
        +--------------------------+---------------------------------------------------------+
        
    입력 :
        STATUS
    결과 :
        Connection id:          2
        Current database:       testdb
        Current user:           user1@localhost
        SSL:                    Not in use
        Using delimiter:        ;
        Server version:         5.7.25-log MySQL Community Server (GPL)
        Protocol version:       10
        Connection:             localhost via TCP/IP
        Server characterset:    latin1
        Db     characterset:    latin1
        Client characterset:    euckr
        Conn.  characterset:    euckr
        TCP port:               3306
        Uptime:                 2 hours 4 min 38 sec
    
    
    SET SYSTEM이랑 다르다는것을 알수있다.
    
    C:/ProgramData/Mysql/MySQL Server 5.7/my.ini 수정
     
    입력 :
        ALTER DATABASE TESTDB DEFAULT CHARACTER SET UTF8;       --이미 만들어진건 수정이 안되어서 바꿔줘야함.
    결과 :
        Query OK, 1 row affected (0.00 sec)
        
    테이블 삭제 후 재생성
    
    인코딩 변경방법
        콘솔에서
            chcp
            Active code page: 65001
            
        또는 mysql에서
        
        mysql>set names euckr;
        
         또는  워크벤치에서
         테이블 생성시
         default character set utf8  을 추가한다.
          
    